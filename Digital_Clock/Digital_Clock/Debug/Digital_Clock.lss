
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00003b3e  00003bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c4  008000c4  00003c36  2**0
                  ALLOC
  3 .stab         000030b4  00000000  00000000  00003c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f94  00000000  00000000  00006cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 12 	call	0x2460	; 0x2460 <main>
      8a:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Mtimer_overflow_init_interrupt>:
#include "../../Lib/BIT_MATH.h"
#include "../../Lib/STD_TYPES.h"
#include "../../MCAL/DIO/DIO.h"
#include "../EXTI/GIE.h"
void Mtimer_overflow_init_interrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/* select timer prescalar ,256*/

	SET_BIT(TCCR0,CS02);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	84 60       	ori	r24, 0x04	; 4
     b5a:	8c 93       	st	X, r24
	/* enable interrupt*/
	MGIE_Enable();
     b5c:	0e 94 82 06 	call	0xd04	; 0xd04 <MGIE_Enable>
	SET_BIT(TIMSK,TOIE0);
     b60:	a9 e5       	ldi	r26, 0x59	; 89
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e9 e5       	ldi	r30, 0x59	; 89
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	8c 93       	st	X, r24
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <Mtimer_CTC_init_interrupt>:
void Mtimer_CTC_init_interrupt(void)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     b7c:	a3 e5       	ldi	r26, 0x53	; 83
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e3 e5       	ldi	r30, 0x53	; 83
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 60       	ori	r24, 0x08	; 8
     b88:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
     b8a:	ec e5       	ldi	r30, 0x5C	; 92
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 e5       	ldi	r24, 0x50	; 80
     b90:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     b92:	a3 e5       	ldi	r26, 0x53	; 83
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e3 e5       	ldi	r30, 0x53	; 83
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     ba0:	a3 e5       	ldi	r26, 0x53	; 83
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e3 e5       	ldi	r30, 0x53	; 83
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	84 60       	ori	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
	/* enable interrupt*/
	MGIE_Enable();
     bae:	0e 94 82 06 	call	0xd04	; 0xd04 <MGIE_Enable>
	SET_BIT(TIMSK,OCIE0);
     bb2:	a9 e5       	ldi	r26, 0x59	; 89
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e9 e5       	ldi	r30, 0x59	; 89
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	8c 93       	st	X, r24
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <Mtimer_wave_nonPWM>:


void Mtimer_wave_nonPWM(void)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     bdc:	a3 e5       	ldi	r26, 0x53	; 83
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e3 e5       	ldi	r30, 0x53	; 83
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	88 60       	ori	r24, 0x08	; 8
     be8:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     bea:	ec e5       	ldi	r30, 0x5C	; 92
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 e4       	ldi	r24, 0x40	; 64
     bf0:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	84 60       	ori	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
     c0e:	a3 e5       	ldi	r26, 0x53	; 83
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 61       	ori	r24, 0x10	; 16
     c1a:	8c 93       	st	X, r24
}
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <Mtimer_wave_fastPWM>:

void Mtimer_wave_fastPWM(void)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     c2a:	a7 e3       	ldi	r26, 0x37	; 55
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e7 e3       	ldi	r30, 0x37	; 55
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	88 60       	ori	r24, 0x08	; 8
     c36:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     c46:	a3 e5       	ldi	r26, 0x53	; 83
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e3 e5       	ldi	r30, 0x53	; 83
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c54:	ec e5       	ldi	r30, 0x5C	; 92
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 e4       	ldi	r24, 0x40	; 64
     c5a:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c5c:	a3 e5       	ldi	r26, 0x53	; 83
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e3 e5       	ldi	r30, 0x53	; 83
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
     c78:	a3 e5       	ldi	r26, 0x53	; 83
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e3 e5       	ldi	r30, 0x53	; 83
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     c86:	a3 e5       	ldi	r26, 0x53	; 83
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e3 e5       	ldi	r30, 0x53	; 83
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	8c 93       	st	X, r24
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <Mtimer_wave_phasecorrectPWM>:


void Mtimer_wave_phasecorrectPWM(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     ca2:	a7 e3       	ldi	r26, 0x37	; 55
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e3       	ldi	r30, 0x37	; 55
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     cb0:	a3 e5       	ldi	r26, 0x53	; 83
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     cbe:	ec e5       	ldi	r30, 0x5C	; 92
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 e4       	ldi	r24, 0x40	; 64
     cc4:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     ce2:	a3 e5       	ldi	r26, 0x53	; 83
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e3 e5       	ldi	r30, 0x53	; 83
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 61       	ori	r24, 0x10	; 16
     cee:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     cf0:	a3 e5       	ldi	r26, 0x53	; 83
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e3 e5       	ldi	r30, 0x53	; 83
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	8c 93       	st	X, r24
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <MGIE_Enable>:
#include "GIE.h"

#define SREG_REG  *((volatile u8 *)0x5F)

void MGIE_Enable()
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
     d0c:	af e5       	ldi	r26, 0x5F	; 95
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ef e5       	ldi	r30, 0x5F	; 95
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	8c 93       	st	X, r24
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <MGIE_disable>:
void MGIE_disable()
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
     d28:	af e5       	ldi	r26, 0x5F	; 95
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ef e5       	ldi	r30, 0x5F	; 95
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <MDIO_voidSetPinDirection>:
 */

#include "DIO.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Dir)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	27 97       	sbiw	r28, 0x07	; 7
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	6a 83       	std	Y+2, r22	; 0x02
     d54:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <MDIO_voidSetPinDirection+0x22>
     d5c:	ea c0       	rjmp	.+468    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
	{
		if(0 == Copy_u8Dir)
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	88 23       	and	r24, r24
     d62:	09 f0       	breq	.+2      	; 0xd66 <MDIO_voidSetPinDirection+0x2a>
     d64:	74 c0       	rjmp	.+232    	; 0xe4e <MDIO_voidSetPinDirection+0x112>
		{
			switch(Copy_u8Port)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3f 83       	std	Y+7, r19	; 0x07
     d6e:	2e 83       	std	Y+6, r18	; 0x06
     d70:	8e 81       	ldd	r24, Y+6	; 0x06
     d72:	9f 81       	ldd	r25, Y+7	; 0x07
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	91 05       	cpc	r25, r1
     d78:	59 f1       	breq	.+86     	; 0xdd0 <MDIO_voidSetPinDirection+0x94>
     d7a:	2e 81       	ldd	r18, Y+6	; 0x06
     d7c:	3f 81       	ldd	r19, Y+7	; 0x07
     d7e:	22 30       	cpi	r18, 0x02	; 2
     d80:	31 05       	cpc	r19, r1
     d82:	2c f4       	brge	.+10     	; 0xd8e <MDIO_voidSetPinDirection+0x52>
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	69 f0       	breq	.+26     	; 0xda6 <MDIO_voidSetPinDirection+0x6a>
     d8c:	d2 c0       	rjmp	.+420    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
     d8e:	2e 81       	ldd	r18, Y+6	; 0x06
     d90:	3f 81       	ldd	r19, Y+7	; 0x07
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	89 f1       	breq	.+98     	; 0xdfa <MDIO_voidSetPinDirection+0xbe>
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	91 05       	cpc	r25, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <MDIO_voidSetPinDirection+0x68>
     da2:	40 c0       	rjmp	.+128    	; 0xe24 <MDIO_voidSetPinDirection+0xe8>
     da4:	c6 c0       	rjmp	.+396    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
			{
				case PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <MDIO_voidSetPinDirection+0x88>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <MDIO_voidSetPinDirection+0x84>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	b1 c0       	rjmp	.+354    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <MDIO_voidSetPinDirection+0xb2>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <MDIO_voidSetPinDirection+0xae>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	9c c0       	rjmp	.+312    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     dfa:	a4 e3       	ldi	r26, 0x34	; 52
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e3       	ldi	r30, 0x34	; 52
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <MDIO_voidSetPinDirection+0xdc>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <MDIO_voidSetPinDirection+0xd8>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	87 c0       	rjmp	.+270    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     e24:	a1 e3       	ldi	r26, 0x31	; 49
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e1 e3       	ldi	r30, 0x31	; 49
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <MDIO_voidSetPinDirection+0x106>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <MDIO_voidSetPinDirection+0x102>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	72 c0       	rjmp	.+228    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
			}
		}
		else if(1 == Copy_u8Dir)
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	09 f0       	breq	.+2      	; 0xe56 <MDIO_voidSetPinDirection+0x11a>
     e54:	6e c0       	rjmp	.+220    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8Port)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	49 f1       	breq	.+82     	; 0xebc <MDIO_voidSetPinDirection+0x180>
     e6a:	2c 81       	ldd	r18, Y+4	; 0x04
     e6c:	3d 81       	ldd	r19, Y+5	; 0x05
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	2c f4       	brge	.+10     	; 0xe7e <MDIO_voidSetPinDirection+0x142>
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	9d 81       	ldd	r25, Y+5	; 0x05
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	61 f0       	breq	.+24     	; 0xe94 <MDIO_voidSetPinDirection+0x158>
     e7c:	5a c0       	rjmp	.+180    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
     e7e:	2c 81       	ldd	r18, Y+4	; 0x04
     e80:	3d 81       	ldd	r19, Y+5	; 0x05
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	71 f1       	breq	.+92     	; 0xee4 <MDIO_voidSetPinDirection+0x1a8>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	e9 f1       	breq	.+122    	; 0xf0c <MDIO_voidSetPinDirection+0x1d0>
     e92:	4f c0       	rjmp	.+158    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
			{
				case PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     e94:	aa e3       	ldi	r26, 0x3A	; 58
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e3       	ldi	r30, 0x3A	; 58
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <MDIO_voidSetPinDirection+0x176>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <MDIO_voidSetPinDirection+0x172>
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	3b c0       	rjmp	.+118    	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <MDIO_voidSetPinDirection+0x19e>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <MDIO_voidSetPinDirection+0x19a>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	27 c0       	rjmp	.+78     	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <MDIO_voidSetPinDirection+0x1c6>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <MDIO_voidSetPinDirection+0x1c2>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	13 c0       	rjmp	.+38     	; 0xf32 <MDIO_voidSetPinDirection+0x1f6>
				case PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     f0c:	a1 e3       	ldi	r26, 0x31	; 49
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e3       	ldi	r30, 0x31	; 49
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <MDIO_voidSetPinDirection+0x1ee>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <MDIO_voidSetPinDirection+0x1ea>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
			}
		}
	}
}
     f32:	27 96       	adiw	r28, 0x07	; 7
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Val)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	27 97       	sbiw	r28, 0x07	; 7
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <MDIO_voidSetPinValue+0x22>
     f64:	ea c0       	rjmp	.+468    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
	{
		if(0 == Copy_u8Val)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <MDIO_voidSetPinValue+0x2a>
     f6c:	74 c0       	rjmp	.+232    	; 0x1056 <MDIO_voidSetPinValue+0x112>
		{
			switch(Copy_u8Port)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3f 83       	std	Y+7, r19	; 0x07
     f76:	2e 83       	std	Y+6, r18	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	59 f1       	breq	.+86     	; 0xfd8 <MDIO_voidSetPinValue+0x94>
     f82:	2e 81       	ldd	r18, Y+6	; 0x06
     f84:	3f 81       	ldd	r19, Y+7	; 0x07
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f4       	brge	.+10     	; 0xf96 <MDIO_voidSetPinValue+0x52>
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	9f 81       	ldd	r25, Y+7	; 0x07
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f0       	breq	.+26     	; 0xfae <MDIO_voidSetPinValue+0x6a>
     f94:	d2 c0       	rjmp	.+420    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
     f96:	2e 81       	ldd	r18, Y+6	; 0x06
     f98:	3f 81       	ldd	r19, Y+7	; 0x07
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	89 f1       	breq	.+98     	; 0x1002 <MDIO_voidSetPinValue+0xbe>
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	9f 81       	ldd	r25, Y+7	; 0x07
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <MDIO_voidSetPinValue+0x68>
     faa:	40 c0       	rjmp	.+128    	; 0x102c <MDIO_voidSetPinValue+0xe8>
     fac:	c6 c0       	rjmp	.+396    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
			{
				case PORTA: CLR_BIT(DIO_PORTA_REG,Copy_u8Pin); break;
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <MDIO_voidSetPinValue+0x88>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <MDIO_voidSetPinValue+0x84>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	b1 c0       	rjmp	.+354    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTB: CLR_BIT(DIO_PORTB_REG,Copy_u8Pin); break;
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <MDIO_voidSetPinValue+0xb2>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <MDIO_voidSetPinValue+0xae>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	9c c0       	rjmp	.+312    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTC: CLR_BIT(DIO_PORTC_REG,Copy_u8Pin); break;
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <MDIO_voidSetPinValue+0xdc>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <MDIO_voidSetPinValue+0xd8>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	87 c0       	rjmp	.+270    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTD: CLR_BIT(DIO_PORTD_REG,Copy_u8Pin); break;
    102c:	a2 e3       	ldi	r26, 0x32	; 50
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e2 e3       	ldi	r30, 0x32	; 50
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <MDIO_voidSetPinValue+0x106>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <MDIO_voidSetPinValue+0x102>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	72 c0       	rjmp	.+228    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
			}
		}
		else if(1 == Copy_u8Val)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <MDIO_voidSetPinValue+0x11a>
    105c:	6e c0       	rjmp	.+220    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8Port)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	49 f1       	breq	.+82     	; 0x10c4 <MDIO_voidSetPinValue+0x180>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <MDIO_voidSetPinValue+0x142>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 f0       	breq	.+24     	; 0x109c <MDIO_voidSetPinValue+0x158>
    1084:	5a c0       	rjmp	.+180    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	71 f1       	breq	.+92     	; 0x10ec <MDIO_voidSetPinValue+0x1a8>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	e9 f1       	breq	.+122    	; 0x1114 <MDIO_voidSetPinValue+0x1d0>
    109a:	4f c0       	rjmp	.+158    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
			{
				case PORTA: SET_BIT(DIO_PORTA_REG,Copy_u8Pin); break;
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <MDIO_voidSetPinValue+0x176>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <MDIO_voidSetPinValue+0x172>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	3b c0       	rjmp	.+118    	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTB: SET_BIT(DIO_PORTB_REG,Copy_u8Pin); break;
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <MDIO_voidSetPinValue+0x19e>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <MDIO_voidSetPinValue+0x19a>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	27 c0       	rjmp	.+78     	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTC: SET_BIT(DIO_PORTC_REG,Copy_u8Pin); break;
    10ec:	a5 e3       	ldi	r26, 0x35	; 53
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <MDIO_voidSetPinValue+0x1c6>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <MDIO_voidSetPinValue+0x1c2>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	13 c0       	rjmp	.+38     	; 0x113a <MDIO_voidSetPinValue+0x1f6>
				case PORTD: SET_BIT(DIO_PORTD_REG,Copy_u8Pin); break;
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MDIO_voidSetPinValue+0x1ee>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MDIO_voidSetPinValue+0x1ea>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
			}
		}
	}
}
    113a:	27 96       	adiw	r28, 0x07	; 7
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <MDIO_u8GetPinValue+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <MDIO_u8GetPinValue+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8a 83       	std	Y+2, r24	; 0x02
    115c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_Value;

	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	08 f0       	brcs	.+2      	; 0x1166 <MDIO_u8GetPinValue+0x1a>
    1164:	67 c0       	rjmp	.+206    	; 0x1234 <MDIO_u8GetPinValue+0xe8>
	{
		switch(Copy_u8Port)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3d 83       	std	Y+5, r19	; 0x05
    116e:	2c 83       	std	Y+4, r18	; 0x04
    1170:	4c 81       	ldd	r20, Y+4	; 0x04
    1172:	5d 81       	ldd	r21, Y+5	; 0x05
    1174:	41 30       	cpi	r20, 0x01	; 1
    1176:	51 05       	cpc	r21, r1
    1178:	41 f1       	breq	.+80     	; 0x11ca <MDIO_u8GetPinValue+0x7e>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	91 05       	cpc	r25, r1
    1182:	34 f4       	brge	.+12     	; 0x1190 <MDIO_u8GetPinValue+0x44>
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	3d 81       	ldd	r19, Y+5	; 0x05
    1188:	21 15       	cp	r18, r1
    118a:	31 05       	cpc	r19, r1
    118c:	61 f0       	breq	.+24     	; 0x11a6 <MDIO_u8GetPinValue+0x5a>
    118e:	52 c0       	rjmp	.+164    	; 0x1234 <MDIO_u8GetPinValue+0xe8>
    1190:	4c 81       	ldd	r20, Y+4	; 0x04
    1192:	5d 81       	ldd	r21, Y+5	; 0x05
    1194:	42 30       	cpi	r20, 0x02	; 2
    1196:	51 05       	cpc	r21, r1
    1198:	51 f1       	breq	.+84     	; 0x11ee <MDIO_u8GetPinValue+0xa2>
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	b9 f1       	breq	.+110    	; 0x1212 <MDIO_u8GetPinValue+0xc6>
    11a4:	47 c0       	rjmp	.+142    	; 0x1234 <MDIO_u8GetPinValue+0xe8>
		{
			case PORTA: Ret_Value = GET_BIT(PINA,Copy_u8Pin); break;
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <MDIO_u8GetPinValue+0x72>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <MDIO_u8GetPinValue+0x6e>
    11c2:	ca 01       	movw	r24, r20
    11c4:	81 70       	andi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	35 c0       	rjmp	.+106    	; 0x1234 <MDIO_u8GetPinValue+0xe8>
			case PORTB: Ret_Value = GET_BIT(PINB,Copy_u8Pin); break;
    11ca:	e6 e3       	ldi	r30, 0x36	; 54
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <MDIO_u8GetPinValue+0x96>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <MDIO_u8GetPinValue+0x92>
    11e6:	ca 01       	movw	r24, r20
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	23 c0       	rjmp	.+70     	; 0x1234 <MDIO_u8GetPinValue+0xe8>
			case PORTC: Ret_Value = GET_BIT(PINC,Copy_u8Pin); break;
    11ee:	e3 e3       	ldi	r30, 0x33	; 51
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_u8GetPinValue+0xba>
    1202:	55 95       	asr	r21
    1204:	47 95       	ror	r20
    1206:	8a 95       	dec	r24
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_u8GetPinValue+0xb6>
    120a:	ca 01       	movw	r24, r20
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <MDIO_u8GetPinValue+0xe8>
			case PORTD: Ret_Value = GET_BIT(PIND,Copy_u8Pin); break;
    1212:	e0 e3       	ldi	r30, 0x30	; 48
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <MDIO_u8GetPinValue+0xde>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <MDIO_u8GetPinValue+0xda>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Ret_Value;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Val)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <MDIO_voidSetPortDirection+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <MDIO_voidSetPortDirection+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	d1 f0       	breq	.+52     	; 0x129e <MDIO_voidSetPortDirection+0x58>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <MDIO_voidSetPortDirection+0x38>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	61 f0       	breq	.+24     	; 0x1294 <MDIO_voidSetPortDirection+0x4e>
    127c:	1e c0       	rjmp	.+60     	; 0x12ba <MDIO_voidSetPortDirection+0x74>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <MDIO_voidSetPortDirection+0x62>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <MDIO_voidSetPortDirection+0x6c>
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <MDIO_voidSetPortDirection+0x74>
	{
		case PORTA: DDRA = Copy_u8Val; break;
    1294:	ea e3       	ldi	r30, 0x3A	; 58
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <MDIO_voidSetPortDirection+0x74>
		case PORTB: DDRB = Copy_u8Val; break;
    129e:	e7 e3       	ldi	r30, 0x37	; 55
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <MDIO_voidSetPortDirection+0x74>
		case PORTC: DDRC = Copy_u8Val; break;
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <MDIO_voidSetPortDirection+0x74>
		case PORTD: DDRD = Copy_u8Val; break;
    12b2:	e1 e3       	ldi	r30, 0x31	; 49
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	80 83       	st	Z, r24
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Val)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <MDIO_voidSetPortValue+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <MDIO_voidSetPortValue+0x8>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3c 83       	std	Y+4, r19	; 0x04
    12e0:	2b 83       	std	Y+3, r18	; 0x03
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f0       	breq	.+52     	; 0x1320 <MDIO_voidSetPortValue+0x58>
    12ec:	2b 81       	ldd	r18, Y+3	; 0x03
    12ee:	3c 81       	ldd	r19, Y+4	; 0x04
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <MDIO_voidSetPortValue+0x38>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 f0       	breq	.+24     	; 0x1316 <MDIO_voidSetPortValue+0x4e>
    12fe:	1e c0       	rjmp	.+60     	; 0x133c <MDIO_voidSetPortValue+0x74>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <MDIO_voidSetPortValue+0x62>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <MDIO_voidSetPortValue+0x6c>
    1314:	13 c0       	rjmp	.+38     	; 0x133c <MDIO_voidSetPortValue+0x74>
	{
		case PORTA: DIO_PORTA_REG = Copy_u8Val; break;
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
    131e:	0e c0       	rjmp	.+28     	; 0x133c <MDIO_voidSetPortValue+0x74>
		case PORTB: DIO_PORTB_REG = Copy_u8Val; break;
    1320:	e8 e3       	ldi	r30, 0x38	; 56
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	80 83       	st	Z, r24
    1328:	09 c0       	rjmp	.+18     	; 0x133c <MDIO_voidSetPortValue+0x74>
		case PORTC: DIO_PORTC_REG = Copy_u8Val; break;
    132a:	e5 e3       	ldi	r30, 0x35	; 53
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
    1332:	04 c0       	rjmp	.+8      	; 0x133c <MDIO_voidSetPortValue+0x74>
		case PORTD: DIO_PORTD_REG = Copy_u8Val; break;
    1334:	e2 e3       	ldi	r30, 0x32	; 50
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	80 83       	st	Z, r24
	}
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <Mwrite_low_nibble>:



void Mwrite_low_nibble(u8 Copy_u8Port,u8 Copy_u8Val)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <Mwrite_low_nibble+0x6>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <Mwrite_low_nibble+0x8>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Val&=0x0f;
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	8f 70       	andi	r24, 0x0F	; 15
    135e:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Port)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3c 83       	std	Y+4, r19	; 0x04
    1368:	2b 83       	std	Y+3, r18	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	29 f1       	breq	.+74     	; 0x13be <Mwrite_low_nibble+0x74>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	3c 81       	ldd	r19, Y+4	; 0x04
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <Mwrite_low_nibble+0x3e>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <Mwrite_low_nibble+0x54>
    1386:	4a c0       	rjmp	.+148    	; 0x141c <Mwrite_low_nibble+0xd2>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	31 f1       	breq	.+76     	; 0x13de <Mwrite_low_nibble+0x94>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	91 05       	cpc	r25, r1
    139a:	89 f1       	breq	.+98     	; 0x13fe <Mwrite_low_nibble+0xb4>
    139c:	3f c0       	rjmp	.+126    	; 0x141c <Mwrite_low_nibble+0xd2>
	{
		case PORTA:
			DIO_PORTA_REG&=0xf0;
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 7f       	andi	r24, 0xF0	; 240
    13aa:	8c 93       	st	X, r24
			DIO_PORTA_REG|=Copy_u8Val;break;
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	90 81       	ld	r25, Z
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	89 2b       	or	r24, r25
    13ba:	8c 93       	st	X, r24
    13bc:	2f c0       	rjmp	.+94     	; 0x141c <Mwrite_low_nibble+0xd2>
		case PORTB:
			DIO_PORTB_REG&=0xf0;
    13be:	a8 e3       	ldi	r26, 0x38	; 56
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e8 e3       	ldi	r30, 0x38	; 56
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 7f       	andi	r24, 0xF0	; 240
    13ca:	8c 93       	st	X, r24
			DIO_PORTB_REG|=Copy_u8Val;break;
    13cc:	a8 e3       	ldi	r26, 0x38	; 56
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e8 e3       	ldi	r30, 0x38	; 56
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	90 81       	ld	r25, Z
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	89 2b       	or	r24, r25
    13da:	8c 93       	st	X, r24
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <Mwrite_low_nibble+0xd2>
		case PORTC:
			DIO_PORTC_REG&=0xf0;
    13de:	a5 e3       	ldi	r26, 0x35	; 53
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e3       	ldi	r30, 0x35	; 53
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 7f       	andi	r24, 0xF0	; 240
    13ea:	8c 93       	st	X, r24
			DIO_PORTC_REG|=Copy_u8Val;break;
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	90 81       	ld	r25, Z
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	89 2b       	or	r24, r25
    13fa:	8c 93       	st	X, r24
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <Mwrite_low_nibble+0xd2>
		case PORTD:
			DIO_PORTD_REG&=0xf0;
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 7f       	andi	r24, 0xF0	; 240
    140a:	8c 93       	st	X, r24
			DIO_PORTD_REG|=Copy_u8Val;break;
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	90 81       	ld	r25, Z
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	89 2b       	or	r24, r25
    141a:	8c 93       	st	X, r24
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Mwrite_high_nibble>:

void Mwrite_high_nibble(u8 Copy_u8Port,u8 Copy_u8Val)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <Mwrite_high_nibble+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <Mwrite_high_nibble+0x8>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Val<<=4;
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	82 95       	swap	r24
    143e:	80 7f       	andi	r24, 0xF0	; 240
    1440:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Port)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	29 f1       	breq	.+74     	; 0x14a0 <Mwrite_high_nibble+0x76>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <Mwrite_high_nibble+0x40>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <Mwrite_high_nibble+0x56>
    1468:	4a c0       	rjmp	.+148    	; 0x14fe <Mwrite_high_nibble+0xd4>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	31 f1       	breq	.+76     	; 0x14c0 <Mwrite_high_nibble+0x96>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	89 f1       	breq	.+98     	; 0x14e0 <Mwrite_high_nibble+0xb6>
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <Mwrite_high_nibble+0xd4>
	{
		case PORTA:
			DIO_PORTA_REG&=0x0f;
    1480:	ab e3       	ldi	r26, 0x3B	; 59
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 70       	andi	r24, 0x0F	; 15
    148c:	8c 93       	st	X, r24
			DIO_PORTA_REG|=Copy_u8Val;break;
    148e:	ab e3       	ldi	r26, 0x3B	; 59
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	90 81       	ld	r25, Z
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	89 2b       	or	r24, r25
    149c:	8c 93       	st	X, r24
    149e:	2f c0       	rjmp	.+94     	; 0x14fe <Mwrite_high_nibble+0xd4>
		case PORTB:
			DIO_PORTB_REG&=0x0f;
    14a0:	a8 e3       	ldi	r26, 0x38	; 56
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 70       	andi	r24, 0x0F	; 15
    14ac:	8c 93       	st	X, r24
			DIO_PORTB_REG|=Copy_u8Val;break;
    14ae:	a8 e3       	ldi	r26, 0x38	; 56
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	90 81       	ld	r25, Z
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	89 2b       	or	r24, r25
    14bc:	8c 93       	st	X, r24
    14be:	1f c0       	rjmp	.+62     	; 0x14fe <Mwrite_high_nibble+0xd4>
		case PORTC:
			DIO_PORTC_REG&=0x0f;
    14c0:	a5 e3       	ldi	r26, 0x35	; 53
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 70       	andi	r24, 0x0F	; 15
    14cc:	8c 93       	st	X, r24
			DIO_PORTC_REG|=Copy_u8Val;break;
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	90 81       	ld	r25, Z
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	89 2b       	or	r24, r25
    14dc:	8c 93       	st	X, r24
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <Mwrite_high_nibble+0xd4>
		case PORTD:
			DIO_PORTD_REG&=0x0f;
    14e0:	a2 e3       	ldi	r26, 0x32	; 50
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	8c 93       	st	X, r24
			DIO_PORTD_REG|=Copy_u8Val;break;
    14ee:	a2 e3       	ldi	r26, 0x32	; 50
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e2 e3       	ldi	r30, 0x32	; 50
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	90 81       	ld	r25, Z
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	89 2b       	or	r24, r25
    14fc:	8c 93       	st	X, r24
	}
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <HLCD_Init>:
#include "LCD.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void HLCD_Init(void)
{
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	c4 55       	subi	r28, 0x54	; 84
    151a:	d0 40       	sbci	r29, 0x00	; 0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	fe 01       	movw	r30, r28
    1528:	ef 5a       	subi	r30, 0xAF	; 175
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a8 e4       	ldi	r26, 0x48	; 72
    1532:	b3 e4       	ldi	r27, 0x43	; 67
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	8e 01       	movw	r16, r28
    153e:	03 5b       	subi	r16, 0xB3	; 179
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	fe 01       	movw	r30, r28
    1544:	ef 5a       	subi	r30, 0xAF	; 175
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a ef       	ldi	r20, 0xFA	; 250
    1556:	54 e4       	ldi	r21, 0x44	; 68
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	f8 01       	movw	r30, r16
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    156a:	fe 01       	movw	r30, r28
    156c:	e3 5b       	subi	r30, 0xB3	; 179
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	44 f4       	brge	.+16     	; 0x1598 <HLCD_Init+0x8c>
		__ticks = 1;
    1588:	fe 01       	movw	r30, r28
    158a:	e5 5b       	subi	r30, 0xB5	; 181
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
    1596:	64 c0       	rjmp	.+200    	; 0x1660 <HLCD_Init+0x154>
	else if (__tmp > 65535)
    1598:	fe 01       	movw	r30, r28
    159a:	e3 5b       	subi	r30, 0xB3	; 179
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	0c f0       	brlt	.+2      	; 0x15b8 <HLCD_Init+0xac>
    15b6:	43 c0       	rjmp	.+134    	; 0x163e <HLCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	fe 01       	movw	r30, r28
    15ba:	ef 5a       	subi	r30, 0xAF	; 175
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8e 01       	movw	r16, r28
    15d8:	05 5b       	subi	r16, 0xB5	; 181
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	1f c0       	rjmp	.+62     	; 0x162e <HLCD_Init+0x122>
    15f0:	fe 01       	movw	r30, r28
    15f2:	e7 5b       	subi	r30, 0xB7	; 183
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fe:	fe 01       	movw	r30, r28
    1600:	e7 5b       	subi	r30, 0xB7	; 183
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <HLCD_Init+0xfc>
    160c:	fe 01       	movw	r30, r28
    160e:	e7 5b       	subi	r30, 0xB7	; 183
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	de 01       	movw	r26, r28
    1618:	a5 5b       	subi	r26, 0xB5	; 181
    161a:	bf 4f       	sbci	r27, 0xFF	; 255
    161c:	fe 01       	movw	r30, r28
    161e:	e5 5b       	subi	r30, 0xB5	; 181
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	9c 93       	st	X, r25
    162c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	fe 01       	movw	r30, r28
    1630:	e5 5b       	subi	r30, 0xB5	; 181
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	d1 f6       	brne	.-76     	; 0x15f0 <HLCD_Init+0xe4>
    163c:	27 c0       	rjmp	.+78     	; 0x168c <HLCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	8e 01       	movw	r16, r28
    1640:	05 5b       	subi	r16, 0xB5	; 181
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	e3 5b       	subi	r30, 0xB3	; 179
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	de 01       	movw	r26, r28
    1662:	a9 5b       	subi	r26, 0xB9	; 185
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e5 5b       	subi	r30, 0xB5	; 181
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	8d 93       	st	X+, r24
    1672:	9c 93       	st	X, r25
    1674:	fe 01       	movw	r30, r28
    1676:	e9 5b       	subi	r30, 0xB9	; 185
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <HLCD_Init+0x172>
    1682:	fe 01       	movw	r30, r28
    1684:	e9 5b       	subi	r30, 0xB9	; 185
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
	_delay_ms(10);
	HLCD_Send_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);

	#elif defined four_bits_mode
	MDIO_voidSetPinDirection(PORTA,4,1);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	64 e0       	ldi	r22, 0x04	; 4
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,5,1);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	65 e0       	ldi	r22, 0x05	; 5
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,6,1);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	66 e0       	ldi	r22, 0x06	; 6
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,7,1);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	67 e0       	ldi	r22, 0x07	; 7
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,EN,1);
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,RW,1);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,RS,1);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 9e 06 	call	0xd3c	; 0xd3c <MDIO_voidSetPinDirection>
   	MDIO_voidSetPinValue(PORTA,RW,0);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
	HLCD_Send_cmd(RETURN_HOME); //return home
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    16e2:	fe 01       	movw	r30, r28
    16e4:	ed 5b       	subi	r30, 0xBD	; 189
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e2       	ldi	r26, 0x20	; 32
    16ee:	b1 e4       	ldi	r27, 0x41	; 65
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	8e 01       	movw	r16, r28
    16fa:	01 5c       	subi	r16, 0xC1	; 193
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	fe 01       	movw	r30, r28
    1700:	ed 5b       	subi	r30, 0xBD	; 189
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a ef       	ldi	r20, 0xFA	; 250
    1712:	54 e4       	ldi	r21, 0x44	; 68
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	f8 01       	movw	r30, r16
    171e:	80 83       	st	Z, r24
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	a2 83       	std	Z+2, r26	; 0x02
    1724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1726:	fe 01       	movw	r30, r28
    1728:	ff 96       	adiw	r30, 0x3f	; 63
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <HLCD_Init+0x240>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9e af       	std	Y+62, r25	; 0x3e
    1748:	8d af       	std	Y+61, r24	; 0x3d
    174a:	46 c0       	rjmp	.+140    	; 0x17d8 <HLCD_Init+0x2cc>
	else if (__tmp > 65535)
    174c:	fe 01       	movw	r30, r28
    174e:	ff 96       	adiw	r30, 0x3f	; 63
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	64 f5       	brge	.+88     	; 0x17c0 <HLCD_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	fe 01       	movw	r30, r28
    176a:	ed 5b       	subi	r30, 0xBD	; 189
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e2       	ldi	r20, 0x20	; 32
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9e af       	std	Y+62, r25	; 0x3e
    1794:	8d af       	std	Y+61, r24	; 0x3d
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <HLCD_Init+0x2aa>
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9c af       	std	Y+60, r25	; 0x3c
    179e:	8b af       	std	Y+59, r24	; 0x3b
    17a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    17a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <HLCD_Init+0x298>
    17a8:	9c af       	std	Y+60, r25	; 0x3c
    17aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	9e af       	std	Y+62, r25	; 0x3e
    17b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	69 f7       	brne	.-38     	; 0x1798 <HLCD_Init+0x28c>
    17be:	16 c0       	rjmp	.+44     	; 0x17ec <HLCD_Init+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	fe 01       	movw	r30, r28
    17c2:	ff 96       	adiw	r30, 0x3f	; 63
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e af       	std	Y+62, r25	; 0x3e
    17d6:	8d af       	std	Y+61, r24	; 0x3d
    17d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17da:	9e ad       	ldd	r25, Y+62	; 0x3e
    17dc:	9a af       	std	Y+58, r25	; 0x3a
    17de:	89 af       	std	Y+57, r24	; 0x39
    17e0:	89 ad       	ldd	r24, Y+57	; 0x39
    17e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <HLCD_Init+0x2d8>
    17e8:	9a af       	std	Y+58, r25	; 0x3a
    17ea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	HLCD_Send_cmd(FOUR_BITS); //4bit mode
    17ec:	88 e2       	ldi	r24, 0x28	; 40
    17ee:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e8       	ldi	r26, 0x80	; 128
    17f8:	bf e3       	ldi	r27, 0x3F	; 63
    17fa:	8d ab       	std	Y+53, r24	; 0x35
    17fc:	9e ab       	std	Y+54, r25	; 0x36
    17fe:	af ab       	std	Y+55, r26	; 0x37
    1800:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6d a9       	ldd	r22, Y+53	; 0x35
    1804:	7e a9       	ldd	r23, Y+54	; 0x36
    1806:	8f a9       	ldd	r24, Y+55	; 0x37
    1808:	98 ad       	ldd	r25, Y+56	; 0x38
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	89 ab       	std	Y+49, r24	; 0x31
    181c:	9a ab       	std	Y+50, r25	; 0x32
    181e:	ab ab       	std	Y+51, r26	; 0x33
    1820:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1822:	69 a9       	ldd	r22, Y+49	; 0x31
    1824:	7a a9       	ldd	r23, Y+50	; 0x32
    1826:	8b a9       	ldd	r24, Y+51	; 0x33
    1828:	9c a9       	ldd	r25, Y+52	; 0x34
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <HLCD_Init+0x338>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <HLCD_Init+0x3b6>
	else if (__tmp > 65535)
    1844:	69 a9       	ldd	r22, Y+49	; 0x31
    1846:	7a a9       	ldd	r23, Y+50	; 0x32
    1848:	8b a9       	ldd	r24, Y+51	; 0x33
    184a:	9c a9       	ldd	r25, Y+52	; 0x34
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <HLCD_Init+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	98 ab       	std	Y+48, r25	; 0x30
    1882:	8f a7       	std	Y+47, r24	; 0x2f
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <HLCD_Init+0x398>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9e a7       	std	Y+46, r25	; 0x2e
    188c:	8d a7       	std	Y+45, r24	; 0x2d
    188e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1890:	9e a5       	ldd	r25, Y+46	; 0x2e
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <HLCD_Init+0x386>
    1896:	9e a7       	std	Y+46, r25	; 0x2e
    1898:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8f a5       	ldd	r24, Y+47	; 0x2f
    189c:	98 a9       	ldd	r25, Y+48	; 0x30
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <HLCD_Init+0x37a>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <HLCD_Init+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	69 a9       	ldd	r22, Y+49	; 0x31
    18b0:	7a a9       	ldd	r23, Y+50	; 0x32
    18b2:	8b a9       	ldd	r24, Y+51	; 0x33
    18b4:	9c a9       	ldd	r25, Y+52	; 0x34
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c4:	98 a9       	ldd	r25, Y+48	; 0x30
    18c6:	9c a7       	std	Y+44, r25	; 0x2c
    18c8:	8b a7       	std	Y+43, r24	; 0x2b
    18ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    18cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <HLCD_Init+0x3c2>
    18d2:	9c a7       	std	Y+44, r25	; 0x2c
    18d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_Send_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    18d6:	8e e0       	ldi	r24, 0x0E	; 14
    18d8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e8       	ldi	r26, 0x80	; 128
    18e2:	bf e3       	ldi	r27, 0x3F	; 63
    18e4:	8f a3       	std	Y+39, r24	; 0x27
    18e6:	98 a7       	std	Y+40, r25	; 0x28
    18e8:	a9 a7       	std	Y+41, r26	; 0x29
    18ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	6f a1       	ldd	r22, Y+39	; 0x27
    18ee:	78 a5       	ldd	r23, Y+40	; 0x28
    18f0:	89 a5       	ldd	r24, Y+41	; 0x29
    18f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a ef       	ldi	r20, 0xFA	; 250
    18fa:	54 e4       	ldi	r21, 0x44	; 68
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8b a3       	std	Y+35, r24	; 0x23
    1906:	9c a3       	std	Y+36, r25	; 0x24
    1908:	ad a3       	std	Y+37, r26	; 0x25
    190a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	2c f4       	brge	.+10     	; 0x192e <HLCD_Init+0x422>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9a a3       	std	Y+34, r25	; 0x22
    192a:	89 a3       	std	Y+33, r24	; 0x21
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <HLCD_Init+0x4a0>
	else if (__tmp > 65535)
    192e:	6b a1       	ldd	r22, Y+35	; 0x23
    1930:	7c a1       	ldd	r23, Y+36	; 0x24
    1932:	8d a1       	ldd	r24, Y+37	; 0x25
    1934:	9e a1       	ldd	r25, Y+38	; 0x26
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	4c f5       	brge	.+82     	; 0x1998 <HLCD_Init+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	6f a1       	ldd	r22, Y+39	; 0x27
    1948:	78 a5       	ldd	r23, Y+40	; 0x28
    194a:	89 a5       	ldd	r24, Y+41	; 0x29
    194c:	9a a5       	ldd	r25, Y+42	; 0x2a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9a a3       	std	Y+34, r25	; 0x22
    196c:	89 a3       	std	Y+33, r24	; 0x21
    196e:	0f c0       	rjmp	.+30     	; 0x198e <HLCD_Init+0x482>
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	98 a3       	std	Y+32, r25	; 0x20
    1976:	8f 8f       	std	Y+31, r24	; 0x1f
    1978:	8f 8d       	ldd	r24, Y+31	; 0x1f
    197a:	98 a1       	ldd	r25, Y+32	; 0x20
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <HLCD_Init+0x470>
    1980:	98 a3       	std	Y+32, r25	; 0x20
    1982:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1984:	89 a1       	ldd	r24, Y+33	; 0x21
    1986:	9a a1       	ldd	r25, Y+34	; 0x22
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	9a a3       	std	Y+34, r25	; 0x22
    198c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198e:	89 a1       	ldd	r24, Y+33	; 0x21
    1990:	9a a1       	ldd	r25, Y+34	; 0x22
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	69 f7       	brne	.-38     	; 0x1970 <HLCD_Init+0x464>
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <HLCD_Init+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1998:	6b a1       	ldd	r22, Y+35	; 0x23
    199a:	7c a1       	ldd	r23, Y+36	; 0x24
    199c:	8d a1       	ldd	r24, Y+37	; 0x25
    199e:	9e a1       	ldd	r25, Y+38	; 0x26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9a a3       	std	Y+34, r25	; 0x22
    19aa:	89 a3       	std	Y+33, r24	; 0x21
    19ac:	89 a1       	ldd	r24, Y+33	; 0x21
    19ae:	9a a1       	ldd	r25, Y+34	; 0x22
    19b0:	9e 8f       	std	Y+30, r25	; 0x1e
    19b2:	8d 8f       	std	Y+29, r24	; 0x1d
    19b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <HLCD_Init+0x4ac>
    19bc:	9e 8f       	std	Y+30, r25	; 0x1e
    19be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_Send_cmd(CLR_SCREEN);//clear the screen
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e2       	ldi	r26, 0x20	; 32
    19cc:	b1 e4       	ldi	r27, 0x41	; 65
    19ce:	89 8f       	std	Y+25, r24	; 0x19
    19d0:	9a 8f       	std	Y+26, r25	; 0x1a
    19d2:	ab 8f       	std	Y+27, r26	; 0x1b
    19d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	69 8d       	ldd	r22, Y+25	; 0x19
    19d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a ef       	ldi	r20, 0xFA	; 250
    19e4:	54 e4       	ldi	r21, 0x44	; 68
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8d 8b       	std	Y+21, r24	; 0x15
    19f0:	9e 8b       	std	Y+22, r25	; 0x16
    19f2:	af 8b       	std	Y+23, r26	; 0x17
    19f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <HLCD_Init+0x50c>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9c 8b       	std	Y+20, r25	; 0x14
    1a14:	8b 8b       	std	Y+19, r24	; 0x13
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <HLCD_Init+0x58a>
	else if (__tmp > 65535)
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <HLCD_Init+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <HLCD_Init+0x56c>
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
    1a62:	89 89       	ldd	r24, Y+17	; 0x11
    1a64:	9a 89       	ldd	r25, Y+18	; 0x12
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <HLCD_Init+0x55a>
    1a6a:	9a 8b       	std	Y+18, r25	; 0x12
    1a6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <HLCD_Init+0x54e>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <HLCD_Init+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	6d 89       	ldd	r22, Y+21	; 0x15
    1a84:	7e 89       	ldd	r23, Y+22	; 0x16
    1a86:	8f 89       	ldd	r24, Y+23	; 0x17
    1a88:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9c 8b       	std	Y+20, r25	; 0x14
    1a94:	8b 8b       	std	Y+19, r24	; 0x13
    1a96:	8b 89       	ldd	r24, Y+19	; 0x13
    1a98:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	98 89       	ldd	r25, Y+16	; 0x10
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <HLCD_Init+0x596>
    1aa6:	98 8b       	std	Y+16, r25	; 0x10
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	HLCD_Send_cmd(ENTRY_MODE); //entry mode
    1aaa:	86 e0       	ldi	r24, 0x06	; 6
    1aac:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	bf e3       	ldi	r27, 0x3F	; 63
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <HLCD_Init+0x5f6>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <HLCD_Init+0x674>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <HLCD_Init+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <HLCD_Init+0x656>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <HLCD_Init+0x644>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <HLCD_Init+0x638>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <HLCD_Init+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <HLCD_Init+0x680>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    1b94:	cc 5a       	subi	r28, 0xAC	; 172
    1b96:	df 4f       	sbci	r29, 0xFF	; 255
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <Hsend_falling_edge>:


void Hsend_falling_edge(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	6c 97       	sbiw	r28, 0x1c	; 28
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(PORTA,EN,1);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e4       	ldi	r27, 0x40	; 64
    1bd2:	89 8f       	std	Y+25, r24	; 0x19
    1bd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	69 8d       	ldd	r22, Y+25	; 0x19
    1bdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a ef       	ldi	r20, 0xFA	; 250
    1be8:	54 e4       	ldi	r21, 0x44	; 68
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8d 8b       	std	Y+21, r24	; 0x15
    1bf4:	9e 8b       	std	Y+22, r25	; 0x16
    1bf6:	af 8b       	std	Y+23, r26	; 0x17
    1bf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <Hsend_falling_edge+0x70>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <Hsend_falling_edge+0xee>
	else if (__tmp > 65535)
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <Hsend_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	69 8d       	ldd	r22, Y+25	; 0x19
    1c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <Hsend_falling_edge+0xd0>
    1c5e:	88 ec       	ldi	r24, 0xC8	; 200
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9a 8b       	std	Y+18, r25	; 0x12
    1c64:	89 8b       	std	Y+17, r24	; 0x11
    1c66:	89 89       	ldd	r24, Y+17	; 0x11
    1c68:	9a 89       	ldd	r25, Y+18	; 0x12
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <Hsend_falling_edge+0xbe>
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <Hsend_falling_edge+0xb2>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <Hsend_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6d 89       	ldd	r22, Y+21	; 0x15
    1c88:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	98 8b       	std	Y+16, r25	; 0x10
    1ca0:	8f 87       	std	Y+15, r24	; 0x0f
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	98 89       	ldd	r25, Y+16	; 0x10
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <Hsend_falling_edge+0xfa>
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(PORTA,EN,0);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e4       	ldi	r27, 0x40	; 64
    1cc0:	8b 87       	std	Y+11, r24	; 0x0b
    1cc2:	9c 87       	std	Y+12, r25	; 0x0c
    1cc4:	ad 87       	std	Y+13, r26	; 0x0d
    1cc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4a ef       	ldi	r20, 0xFA	; 250
    1cd6:	54 e4       	ldi	r21, 0x44	; 68
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	8f 83       	std	Y+7, r24	; 0x07
    1ce2:	98 87       	std	Y+8, r25	; 0x08
    1ce4:	a9 87       	std	Y+9, r26	; 0x09
    1ce6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <Hsend_falling_edge+0x15e>
		__ticks = 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	3f c0       	rjmp	.+126    	; 0x1d88 <Hsend_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	3f ef       	ldi	r19, 0xFF	; 255
    1d16:	4f e7       	ldi	r20, 0x7F	; 127
    1d18:	57 e4       	ldi	r21, 0x47	; 71
    1d1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1e:	18 16       	cp	r1, r24
    1d20:	4c f5       	brge	.+82     	; 0x1d74 <Hsend_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e2       	ldi	r20, 0x20	; 32
    1d30:	51 e4       	ldi	r21, 0x41	; 65
    1d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <Hsend_falling_edge+0x1be>
    1d4c:	88 ec       	ldi	r24, 0xC8	; 200
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <Hsend_falling_edge+0x1ac>
    1d5c:	9c 83       	std	Y+4, r25	; 0x04
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	69 f7       	brne	.-38     	; 0x1d4c <Hsend_falling_edge+0x1a0>
    1d72:	14 c0       	rjmp	.+40     	; 0x1d9c <Hsend_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <Hsend_falling_edge+0x1e8>
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d9c:	6c 96       	adiw	r28, 0x1c	; 28
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <HLCD_Send_cmd>:
void HLCD_Send_cmd(u8 cmd)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	2f 97       	sbiw	r28, 0x0f	; 15
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPortValue(PORTA,cmd);
	MDIO_voidSetPinValue(PORTB,RS,0);
	Hsend_falling_edge();

	#elif defined four_bits_mode
	Mwrite_high_nibble(PORTA,cmd>>4);
    1dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	92 95       	swap	r25
    1dca:	9f 70       	andi	r25, 0x0F	; 15
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	69 2f       	mov	r22, r25
    1dd0:	0e 94 15 0a 	call	0x142a	; 0x142a <Mwrite_high_nibble>
	MDIO_voidSetPinValue(PORTA,RS,0);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
	Hsend_falling_edge();
    1dde:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Hsend_falling_edge>
	Mwrite_high_nibble(PORTA,cmd);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1de6:	0e 94 15 0a 	call	0x142a	; 0x142a <Mwrite_high_nibble>
	MDIO_voidSetPinValue(PORTA,RS,0);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
	Hsend_falling_edge();
    1df4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Hsend_falling_edge>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e8       	ldi	r26, 0x80	; 128
    1dfe:	bf e3       	ldi	r27, 0x3F	; 63
    1e00:	8b 87       	std	Y+11, r24	; 0x0b
    1e02:	9c 87       	std	Y+12, r25	; 0x0c
    1e04:	ad 87       	std	Y+13, r26	; 0x0d
    1e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8f 83       	std	Y+7, r24	; 0x07
    1e22:	98 87       	std	Y+8, r25	; 0x08
    1e24:	a9 87       	std	Y+9, r26	; 0x09
    1e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <HLCD_Send_cmd+0x9c>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <HLCD_Send_cmd+0x11a>
	else if (__tmp > 65535)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <HLCD_Send_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <HLCD_Send_cmd+0xfc>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <HLCD_Send_cmd+0xea>
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <HLCD_Send_cmd+0xde>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <HLCD_Send_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <HLCD_Send_cmd+0x126>
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    1edc:	2f 96       	adiw	r28, 0x0f	; 15
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <HLCD_Send_char>:

void HLCD_Send_char(u8 data) // HLCD_vSend_Data(u8 data)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPortValue(PORTA,data);
	MDIO_voidSetPinValue(PORTB,RS,1);
	Hsend_falling_edge();

	#elif defined four_bits_mode
	Mwrite_high_nibble(PORTA,data>>4);
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 2f       	mov	r25, r24
    1f08:	92 95       	swap	r25
    1f0a:	9f 70       	andi	r25, 0x0F	; 15
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	69 2f       	mov	r22, r25
    1f10:	0e 94 15 0a 	call	0x142a	; 0x142a <Mwrite_high_nibble>
	MDIO_voidSetPinValue(PORTA,RS,1);
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	62 e0       	ldi	r22, 0x02	; 2
    1f18:	41 e0       	ldi	r20, 0x01	; 1
    1f1a:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
	Hsend_falling_edge();
    1f1e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Hsend_falling_edge>
	Mwrite_high_nibble(PORTA,data);
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f26:	0e 94 15 0a 	call	0x142a	; 0x142a <Mwrite_high_nibble>
	MDIO_voidSetPinValue(PORTA,RS,1);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
	Hsend_falling_edge();
    1f34:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Hsend_falling_edge>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e8       	ldi	r26, 0x80	; 128
    1f3e:	bf e3       	ldi	r27, 0x3F	; 63
    1f40:	8b 87       	std	Y+11, r24	; 0x0b
    1f42:	9c 87       	std	Y+12, r25	; 0x0c
    1f44:	ad 87       	std	Y+13, r26	; 0x0d
    1f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8f 83       	std	Y+7, r24	; 0x07
    1f62:	98 87       	std	Y+8, r25	; 0x08
    1f64:	a9 87       	std	Y+9, r26	; 0x09
    1f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <HLCD_Send_char+0x9c>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <HLCD_Send_char+0x11a>
	else if (__tmp > 65535)
    1f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8c:	78 85       	ldd	r23, Y+8	; 0x08
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <HLCD_Send_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <HLCD_Send_char+0xfc>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <HLCD_Send_char+0xea>
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <HLCD_Send_char+0xde>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <HLCD_Send_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <HLCD_Send_char+0x126>
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    201c:	2f 96       	adiw	r28, 0x0f	; 15
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <HLCD_Send_string>:


void HLCD_Send_string(u8 *data)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <HLCD_Send_string+0x6>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <HLCD_Send_string+0x24>
	while((*data)!='\0')
	{
		HLCD_Send_char(*data);
    203e:	e9 81       	ldd	r30, Y+1	; 0x01
    2040:	fa 81       	ldd	r31, Y+2	; 0x02
    2042:	80 81       	ld	r24, Z
    2044:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
		data++;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_Send_string(u8 *data)
{
	while((*data)!='\0')
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	80 81       	ld	r24, Z
    2058:	88 23       	and	r24, r24
    205a:	89 f7       	brne	.-30     	; 0x203e <HLCD_Send_string+0x10>
	{
		HLCD_Send_char(*data);
		data++;
	}
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <HLCD_clearscreen>:
void HLCD_clearscreen()
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	2e 97       	sbiw	r28, 0x0e	; 14
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
	HLCD_Send_cmd(CLR_SCREEN);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e2       	ldi	r26, 0x20	; 32
    2086:	b1 e4       	ldi	r27, 0x41	; 65
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a ef       	ldi	r20, 0xFA	; 250
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <HLCD_clearscreen+0x6c>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <HLCD_clearscreen+0xea>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <HLCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <HLCD_clearscreen+0xcc>
    2114:	88 ec       	ldi	r24, 0xC8	; 200
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <HLCD_clearscreen+0xba>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <HLCD_clearscreen+0xae>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <HLCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <HLCD_clearscreen+0xf6>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2164:	2e 96       	adiw	r28, 0x0e	; 14
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <HLCD_movecursor>:
void HLCD_movecursor(u8 row,u8 coloumn)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	61 97       	sbiw	r28, 0x11	; 17
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	88 8b       	std	Y+16, r24	; 0x10
    218c:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    218e:	88 89       	ldd	r24, Y+16	; 0x10
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	48 f4       	brcc	.+18     	; 0x21a6 <HLCD_movecursor+0x30>
    2194:	88 89       	ldd	r24, Y+16	; 0x10
    2196:	88 23       	and	r24, r24
    2198:	31 f0       	breq	.+12     	; 0x21a6 <HLCD_movecursor+0x30>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	81 31       	cpi	r24, 0x11	; 17
    219e:	18 f4       	brcc	.+6      	; 0x21a6 <HLCD_movecursor+0x30>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	88 23       	and	r24, r24
    21a4:	19 f4       	brne	.+6      	; 0x21ac <HLCD_movecursor+0x36>
	{
		data=0x80;
    21a6:	80 e8       	ldi	r24, 0x80	; 128
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
    21aa:	0d c0       	rjmp	.+26     	; 0x21c6 <HLCD_movecursor+0x50>
	}
	else if(row==1)
    21ac:	88 89       	ldd	r24, Y+16	; 0x10
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	21 f4       	brne	.+8      	; 0x21ba <HLCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    21b2:	89 89       	ldd	r24, Y+17	; 0x11
    21b4:	81 58       	subi	r24, 0x81	; 129
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <HLCD_movecursor+0x50>
	}
	else if (row==2)
    21ba:	88 89       	ldd	r24, Y+16	; 0x10
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	19 f4       	brne	.+6      	; 0x21c6 <HLCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	81 54       	subi	r24, 0x41	; 65
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	HLCD_Send_cmd(data);
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <HLCD_Send_cmd>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8b 87       	std	Y+11, r24	; 0x0b
    21d6:	9c 87       	std	Y+12, r25	; 0x0c
    21d8:	ad 87       	std	Y+13, r26	; 0x0d
    21da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8f 83       	std	Y+7, r24	; 0x07
    21f6:	98 87       	std	Y+8, r25	; 0x08
    21f8:	a9 87       	std	Y+9, r26	; 0x09
    21fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <HLCD_movecursor+0xa8>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	3f c0       	rjmp	.+126    	; 0x229c <HLCD_movecursor+0x126>
	else if (__tmp > 65535)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <HLCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	0f c0       	rjmp	.+30     	; 0x227e <HLCD_movecursor+0x108>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <HLCD_movecursor+0xf6>
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <HLCD_movecursor+0xea>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <HLCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <HLCD_movecursor+0x132>
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    22b0:	61 96       	adiw	r28, 0x11	; 17
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <Hkeypad_Init>:
 *      Author: hp
 */
#include "KEYPAD.h"

void Hkeypad_Init()
 {
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	 MDIO_voidSetPortDirection(PORTD,0x0f);
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	6f e0       	ldi	r22, 0x0F	; 15
    22ce:	0e 94 23 09 	call	0x1246	; 0x1246 <MDIO_voidSetPortDirection>
	 MDIO_voidSetPortValue(PORTD,0xff);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	6f ef       	ldi	r22, 0xFF	; 255
    22d6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <MDIO_voidSetPortValue>

 }
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <Hkeypad_u8check_press>:
 u8 Hkeypad_u8check_press()
 {
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	69 97       	sbiw	r28, 0x19	; 25
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
	 u8 arr[4][4]={{'7','8','9','/'},
			       {'4','5','6','*'},
			       {'1','2','3','-'},
			       {'A','0','=','+'}};
    22f4:	ce 01       	movw	r24, r28
    22f6:	05 96       	adiw	r24, 0x05	; 5
    22f8:	9e 8b       	std	Y+22, r25	; 0x16
    22fa:	8d 8b       	std	Y+21, r24	; 0x15
    22fc:	e9 ea       	ldi	r30, 0xA9	; 169
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	f8 8f       	std	Y+24, r31	; 0x18
    2302:	ef 8b       	std	Y+23, r30	; 0x17
    2304:	f0 e1       	ldi	r31, 0x10	; 16
    2306:	f9 8f       	std	Y+25, r31	; 0x19
    2308:	ef 89       	ldd	r30, Y+23	; 0x17
    230a:	f8 8d       	ldd	r31, Y+24	; 0x18
    230c:	00 80       	ld	r0, Z
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	98 8f       	std	Y+24, r25	; 0x18
    2316:	8f 8b       	std	Y+23, r24	; 0x17
    2318:	ed 89       	ldd	r30, Y+21	; 0x15
    231a:	fe 89       	ldd	r31, Y+22	; 0x16
    231c:	00 82       	st	Z, r0
    231e:	8d 89       	ldd	r24, Y+21	; 0x15
    2320:	9e 89       	ldd	r25, Y+22	; 0x16
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	8d 8b       	std	Y+21, r24	; 0x15
    2328:	99 8d       	ldd	r25, Y+25	; 0x19
    232a:	91 50       	subi	r25, 0x01	; 1
    232c:	99 8f       	std	Y+25, r25	; 0x19
    232e:	e9 8d       	ldd	r30, Y+25	; 0x19
    2330:	ee 23       	and	r30, r30
    2332:	51 f7       	brne	.-44     	; 0x2308 <Hkeypad_u8check_press+0x28>
	 u8 row,coloumn,x;
	 u8 returnval=NOTPRESSED;
    2334:	8f ef       	ldi	r24, 0xFF	; 255
    2336:	89 83       	std	Y+1, r24	; 0x01
	 for(row=0;row<4;row++)
    2338:	1c 82       	std	Y+4, r1	; 0x04
    233a:	35 c0       	rjmp	.+106    	; 0x23a6 <Hkeypad_u8check_press+0xc6>
	 {

		MDIO_voidSetPinValue(PORTD,row,0);
    233c:	83 e0       	ldi	r24, 0x03	; 3
    233e:	6c 81       	ldd	r22, Y+4	; 0x04
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>

		for(coloumn=0;coloumn<4;coloumn++)
    2346:	1b 82       	std	Y+3, r1	; 0x03
    2348:	23 c0       	rjmp	.+70     	; 0x2390 <Hkeypad_u8check_press+0xb0>
		{
			x=MDIO_u8GetPinValue(PORTD,(coloumn+4));
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	98 2f       	mov	r25, r24
    234e:	9c 5f       	subi	r25, 0xFC	; 252
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	69 2f       	mov	r22, r25
    2354:	0e 94 a6 08 	call	0x114c	; 0x114c <MDIO_u8GetPinValue>
    2358:	8a 83       	std	Y+2, r24	; 0x02
			if(x==0)
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	88 23       	and	r24, r24
    235e:	a9 f4       	brne	.+42     	; 0x238a <Hkeypad_u8check_press+0xaa>
			 {
				 returnval=arr[row][coloumn];
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	48 2f       	mov	r20, r24
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	ce 01       	movw	r24, r28
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	84 0f       	add	r24, r20
    237e:	95 1f       	adc	r25, r21
    2380:	fc 01       	movw	r30, r24
    2382:	34 96       	adiw	r30, 0x04	; 4
    2384:	80 81       	ld	r24, Z
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	06 c0       	rjmp	.+12     	; 0x2396 <Hkeypad_u8check_press+0xb6>
	 for(row=0;row<4;row++)
	 {

		MDIO_voidSetPinValue(PORTD,row,0);

		for(coloumn=0;coloumn<4;coloumn++)
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	8b 83       	std	Y+3, r24	; 0x03
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	d0 f2       	brcs	.-76     	; 0x234a <Hkeypad_u8check_press+0x6a>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }
		}
		MDIO_voidSetPinValue(PORTD,row,1);
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	6c 81       	ldd	r22, Y+4	; 0x04
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 a2 07 	call	0xf44	; 0xf44 <MDIO_voidSetPinValue>
			       {'4','5','6','*'},
			       {'1','2','3','-'},
			       {'A','0','=','+'}};
	 u8 row,coloumn,x;
	 u8 returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	8f 5f       	subi	r24, 0xFF	; 255
    23a4:	8c 83       	std	Y+4, r24	; 0x04
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	84 30       	cpi	r24, 0x04	; 4
    23aa:	40 f2       	brcs	.-112    	; 0x233c <Hkeypad_u8check_press+0x5c>
				 break;
			 }
		}
		MDIO_voidSetPinValue(PORTD,row,1);
	}
	 return returnval ;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
 }
    23ae:	69 96       	adiw	r28, 0x19	; 25
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <Hseven_seg_vinit>:
 *      Author: hp
 */
#include "7SEGMENT.h"

void Hseven_seg_vinit(u8 port_name)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPortDirection(port_name,0xFF);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	6f ef       	ldi	r22, 0xFF	; 255
    23d0:	0e 94 23 09 	call	0x1246	; 0x1246 <MDIO_voidSetPortDirection>
}
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <Hseven_seg_write>:

void Hseven_seg_write(u8 portname,u8 number)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	61 97       	sbiw	r28, 0x11	; 17
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	8b 87       	std	Y+11, r24	; 0x0b
    23f2:	6c 87       	std	Y+12, r22	; 0x0c
u8 arr[]={0x3f,0x06,0x5b,
		  0x4f,0x66,0x6d,
		  0x7d,0x47,0x7f,0x6f};
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	9e 87       	std	Y+14, r25	; 0x0e
    23fa:	8d 87       	std	Y+13, r24	; 0x0d
    23fc:	e9 eb       	ldi	r30, 0xB9	; 185
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	f8 8b       	std	Y+16, r31	; 0x10
    2402:	ef 87       	std	Y+15, r30	; 0x0f
    2404:	fa e0       	ldi	r31, 0x0A	; 10
    2406:	f9 8b       	std	Y+17, r31	; 0x11
    2408:	ef 85       	ldd	r30, Y+15	; 0x0f
    240a:	f8 89       	ldd	r31, Y+16	; 0x10
    240c:	00 80       	ld	r0, Z
    240e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2410:	98 89       	ldd	r25, Y+16	; 0x10
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	98 8b       	std	Y+16, r25	; 0x10
    2416:	8f 87       	std	Y+15, r24	; 0x0f
    2418:	ed 85       	ldd	r30, Y+13	; 0x0d
    241a:	fe 85       	ldd	r31, Y+14	; 0x0e
    241c:	00 82       	st	Z, r0
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	01 96       	adiw	r24, 0x01	; 1
    2424:	9e 87       	std	Y+14, r25	; 0x0e
    2426:	8d 87       	std	Y+13, r24	; 0x0d
    2428:	99 89       	ldd	r25, Y+17	; 0x11
    242a:	91 50       	subi	r25, 0x01	; 1
    242c:	99 8b       	std	Y+17, r25	; 0x11
    242e:	e9 89       	ldd	r30, Y+17	; 0x11
    2430:	ee 23       	and	r30, r30
    2432:	51 f7       	brne	.-44     	; 0x2408 <Hseven_seg_write+0x2c>

MDIO_voidSetPortValue(portname,arr[number]);
    2434:	8c 85       	ldd	r24, Y+12	; 0x0c
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	ce 01       	movw	r24, r28
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	90 81       	ld	r25, Z
    2446:	8b 85       	ldd	r24, Y+11	; 0x0b
    2448:	69 2f       	mov	r22, r25
    244a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <MDIO_voidSetPortValue>
}
    244e:	61 96       	adiw	r28, 0x11	; 17
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <main>:
   minutes_counter=0,
     hours_counter=0;
		;
u8 value,first_digit,second_digit;
int main(void)
{
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	c4 5c       	subi	r28, 0xC4	; 196
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
	Hkeypad_Init();
    247a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Hkeypad_Init>
	HLCD_Init();
    247e:	0e 94 86 0a 	call	0x150c	; 0x150c <HLCD_Init>
	Hseven_seg_vinit(PORTB);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <Hseven_seg_vinit>
	MDIO_voidSetPortDirection(PORTC,0xff);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	6f ef       	ldi	r22, 0xFF	; 255
    248c:	0e 94 23 09 	call	0x1246	; 0x1246 <MDIO_voidSetPortDirection>
	HLCD_Send_string("press 1 to");
    2490:	80 e6       	ldi	r24, 0x60	; 96
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
	HLCD_movecursor(2,1);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>
	HLCD_Send_string("set clock");
    24a0:	8b e6       	ldi	r24, 0x6B	; 107
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
	Mtimer_overflow_init_interrupt();
    24a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Mtimer_overflow_init_interrupt>

	while(1)
	{
	value=Hkeypad_u8check_press();
    24ac:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    24b0:	80 93 cb 00 	sts	0x00CB, r24
	if (value!=NOTPRESSED)
    24b4:	80 91 cb 00 	lds	r24, 0x00CB
    24b8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ba:	09 f4       	brne	.+2      	; 0x24be <main+0x5e>
    24bc:	65 c6       	rjmp	.+3274   	; 0x3188 <main+0xd28>
	{
		if (value=='1')
    24be:	80 91 cb 00 	lds	r24, 0x00CB
    24c2:	81 33       	cpi	r24, 0x31	; 49
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <main+0x68>
    24c6:	99 c5       	rjmp	.+2866   	; 0x2ffa <main+0xb9a>
		{

			HLCD_clearscreen();
    24c8:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>
			HLCD_Send_string("hours=--");
    24cc:	85 e7       	ldi	r24, 0x75	; 117
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
			HLCD_movecursor(1,7);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	67 e0       	ldi	r22, 0x07	; 7
    24d8:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 53       	subi	r30, 0x3F	; 63
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	aa ef       	ldi	r26, 0xFA	; 250
    24e8:	b3 e4       	ldi	r27, 0x43	; 67
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	8e 01       	movw	r16, r28
    24f4:	03 54       	subi	r16, 0x43	; 67
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	fe 01       	movw	r30, r28
    24fa:	ef 53       	subi	r30, 0x3F	; 63
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a ef       	ldi	r20, 0xFA	; 250
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2520:	fe 01       	movw	r30, r28
    2522:	e3 54       	subi	r30, 0x43	; 67
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	44 f4       	brge	.+16     	; 0x254e <main+0xee>
		__ticks = 1;
    253e:	fe 01       	movw	r30, r28
    2540:	e5 54       	subi	r30, 0x45	; 69
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	64 c0       	rjmp	.+200    	; 0x2616 <main+0x1b6>
	else if (__tmp > 65535)
    254e:	fe 01       	movw	r30, r28
    2550:	e3 54       	subi	r30, 0x43	; 67
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	0c f0       	brlt	.+2      	; 0x256e <main+0x10e>
    256c:	43 c0       	rjmp	.+134    	; 0x25f4 <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	fe 01       	movw	r30, r28
    2570:	ef 53       	subi	r30, 0x3F	; 63
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8e 01       	movw	r16, r28
    258e:	05 54       	subi	r16, 0x45	; 69
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	1f c0       	rjmp	.+62     	; 0x25e4 <main+0x184>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e7 54       	subi	r30, 0x47	; 71
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	88 ec       	ldi	r24, 0xC8	; 200
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 54       	subi	r30, 0x47	; 71
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <main+0x15e>
    25c2:	fe 01       	movw	r30, r28
    25c4:	e7 54       	subi	r30, 0x47	; 71
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	de 01       	movw	r26, r28
    25ce:	a5 54       	subi	r26, 0x45	; 69
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 54       	subi	r30, 0x45	; 69
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	11 96       	adiw	r26, 0x01	; 1
    25e0:	9c 93       	st	X, r25
    25e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 54       	subi	r30, 0x45	; 69
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	d1 f6       	brne	.-76     	; 0x25a6 <main+0x146>
    25f2:	27 c0       	rjmp	.+78     	; 0x2642 <main+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	8e 01       	movw	r16, r28
    25f6:	05 54       	subi	r16, 0x45	; 69
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e3 54       	subi	r30, 0x43	; 67
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	de 01       	movw	r26, r28
    2618:	a9 54       	subi	r26, 0x49	; 73
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e5 54       	subi	r30, 0x45	; 69
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	8d 93       	st	X+, r24
    2628:	9c 93       	st	X, r25
    262a:	fe 01       	movw	r30, r28
    262c:	e9 54       	subi	r30, 0x49	; 73
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0x1d4>
    2638:	fe 01       	movw	r30, r28
    263a:	e9 54       	subi	r30, 0x49	; 73
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
			_delay_ms(500);
			do
			{
				first_digit=Hkeypad_u8check_press();
    2642:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    2646:	80 93 c9 00 	sts	0x00C9, r24

			} while (first_digit==NOTPRESSED);
    264a:	80 91 c9 00 	lds	r24, 0x00C9
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	c1 f3       	breq	.-16     	; 0x2642 <main+0x1e2>
			HLCD_Send_char(first_digit);
    2652:	80 91 c9 00 	lds	r24, 0x00C9
    2656:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    265a:	fe 01       	movw	r30, r28
    265c:	ed 54       	subi	r30, 0x4D	; 77
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a6 e9       	ldi	r26, 0x96	; 150
    2666:	b3 e4       	ldi	r27, 0x43	; 67
    2668:	80 83       	st	Z, r24
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	a2 83       	std	Z+2, r26	; 0x02
    266e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	8e 01       	movw	r16, r28
    2672:	01 55       	subi	r16, 0x51	; 81
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	ed 54       	subi	r30, 0x4D	; 77
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	f8 01       	movw	r30, r16
    2696:	80 83       	st	Z, r24
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	a2 83       	std	Z+2, r26	; 0x02
    269c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    269e:	fe 01       	movw	r30, r28
    26a0:	e1 55       	subi	r30, 0x51	; 81
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	44 f4       	brge	.+16     	; 0x26cc <main+0x26c>
		__ticks = 1;
    26bc:	fe 01       	movw	r30, r28
    26be:	e3 55       	subi	r30, 0x53	; 83
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	64 c0       	rjmp	.+200    	; 0x2794 <main+0x334>
	else if (__tmp > 65535)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e1 55       	subi	r30, 0x51	; 81
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	0c f0       	brlt	.+2      	; 0x26ec <main+0x28c>
    26ea:	43 c0       	rjmp	.+134    	; 0x2772 <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	fe 01       	movw	r30, r28
    26ee:	ed 54       	subi	r30, 0x4D	; 77
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8e 01       	movw	r16, r28
    270c:	03 55       	subi	r16, 0x53	; 83
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	1f c0       	rjmp	.+62     	; 0x2762 <main+0x302>
    2724:	fe 01       	movw	r30, r28
    2726:	e5 55       	subi	r30, 0x55	; 85
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	88 ec       	ldi	r24, 0xC8	; 200
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
    2732:	fe 01       	movw	r30, r28
    2734:	e5 55       	subi	r30, 0x55	; 85
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <main+0x2dc>
    2740:	fe 01       	movw	r30, r28
    2742:	e5 55       	subi	r30, 0x55	; 85
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274a:	de 01       	movw	r26, r28
    274c:	a3 55       	subi	r26, 0x53	; 83
    274e:	bf 4f       	sbci	r27, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	e3 55       	subi	r30, 0x53	; 83
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	11 96       	adiw	r26, 0x01	; 1
    275e:	9c 93       	st	X, r25
    2760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	fe 01       	movw	r30, r28
    2764:	e3 55       	subi	r30, 0x53	; 83
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	d1 f6       	brne	.-76     	; 0x2724 <main+0x2c4>
    2770:	27 c0       	rjmp	.+78     	; 0x27c0 <main+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	8e 01       	movw	r16, r28
    2774:	03 55       	subi	r16, 0x53	; 83
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	e1 55       	subi	r30, 0x51	; 81
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	f8 01       	movw	r30, r16
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
    2794:	de 01       	movw	r26, r28
    2796:	a7 55       	subi	r26, 0x57	; 87
    2798:	bf 4f       	sbci	r27, 0xFF	; 255
    279a:	fe 01       	movw	r30, r28
    279c:	e3 55       	subi	r30, 0x53	; 83
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	8d 93       	st	X+, r24
    27a6:	9c 93       	st	X, r25
    27a8:	fe 01       	movw	r30, r28
    27aa:	e7 55       	subi	r30, 0x57	; 87
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <main+0x352>
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 55       	subi	r30, 0x57	; 87
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
			_delay_ms(300);
			do
			{
				second_digit=Hkeypad_u8check_press();
    27c0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    27c4:	80 93 ca 00 	sts	0x00CA, r24

			} while (second_digit==NOTPRESSED);
    27c8:	80 91 ca 00 	lds	r24, 0x00CA
    27cc:	8f 3f       	cpi	r24, 0xFF	; 255
    27ce:	c1 f3       	breq	.-16     	; 0x27c0 <main+0x360>
			HLCD_Send_char(second_digit);
    27d0:	80 91 ca 00 	lds	r24, 0x00CA
    27d4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    27d8:	fe 01       	movw	r30, r28
    27da:	eb 55       	subi	r30, 0x5B	; 91
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a6 e9       	ldi	r26, 0x96	; 150
    27e4:	b3 e4       	ldi	r27, 0x43	; 67
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	8e 01       	movw	r16, r28
    27f0:	0f 55       	subi	r16, 0x5F	; 95
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	eb 55       	subi	r30, 0x5B	; 91
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a ef       	ldi	r20, 0xFA	; 250
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281c:	fe 01       	movw	r30, r28
    281e:	ef 55       	subi	r30, 0x5F	; 95
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	44 f4       	brge	.+16     	; 0x284a <main+0x3ea>
		__ticks = 1;
    283a:	fe 01       	movw	r30, r28
    283c:	e1 56       	subi	r30, 0x61	; 97
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	64 c0       	rjmp	.+200    	; 0x2912 <main+0x4b2>
	else if (__tmp > 65535)
    284a:	fe 01       	movw	r30, r28
    284c:	ef 55       	subi	r30, 0x5F	; 95
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <main+0x40a>
    2868:	43 c0       	rjmp	.+134    	; 0x28f0 <main+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	eb 55       	subi	r30, 0x5B	; 91
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8e 01       	movw	r16, r28
    288a:	01 56       	subi	r16, 0x61	; 97
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	1f c0       	rjmp	.+62     	; 0x28e0 <main+0x480>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 56       	subi	r30, 0x63	; 99
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	e3 56       	subi	r30, 0x63	; 99
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <main+0x45a>
    28be:	fe 01       	movw	r30, r28
    28c0:	e3 56       	subi	r30, 0x63	; 99
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	de 01       	movw	r26, r28
    28ca:	a1 56       	subi	r26, 0x61	; 97
    28cc:	bf 4f       	sbci	r27, 0xFF	; 255
    28ce:	fe 01       	movw	r30, r28
    28d0:	e1 56       	subi	r30, 0x61	; 97
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	9c 93       	st	X, r25
    28de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e1 56       	subi	r30, 0x61	; 97
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	d1 f6       	brne	.-76     	; 0x28a2 <main+0x442>
    28ee:	27 c0       	rjmp	.+78     	; 0x293e <main+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	8e 01       	movw	r16, r28
    28f2:	01 56       	subi	r16, 0x61	; 97
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	ef 55       	subi	r30, 0x5F	; 95
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	de 01       	movw	r26, r28
    2914:	a5 56       	subi	r26, 0x65	; 101
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e1 56       	subi	r30, 0x61	; 97
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	8d 93       	st	X+, r24
    2924:	9c 93       	st	X, r25
    2926:	fe 01       	movw	r30, r28
    2928:	e5 56       	subi	r30, 0x65	; 101
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <main+0x4d0>
    2934:	fe 01       	movw	r30, r28
    2936:	e5 56       	subi	r30, 0x65	; 101
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
			_delay_ms(300);
			hours_counter=(second_digit-48)
    293e:	80 91 c9 00 	lds	r24, 0x00C9
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9c 01       	movw	r18, r24
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	c9 01       	movw	r24, r18
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	98 2f       	mov	r25, r24
    295c:	80 91 ca 00 	lds	r24, 0x00CA
    2960:	89 0f       	add	r24, r25
    2962:	80 51       	subi	r24, 0x10	; 16
    2964:	80 93 c6 00 	sts	0x00C6, r24
						  +10*(first_digit-48);
			HLCD_clearscreen();
    2968:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>

			HLCD_Send_string("minutes=--");
    296c:	8e e7       	ldi	r24, 0x7E	; 126
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
			HLCD_movecursor(1,9);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	69 e0       	ldi	r22, 0x09	; 9
    2978:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>
			do
			{
				first_digit=Hkeypad_u8check_press();
    297c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    2980:	80 93 c9 00 	sts	0x00C9, r24

			} while (first_digit==NOTPRESSED);
    2984:	80 91 c9 00 	lds	r24, 0x00C9
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	c1 f3       	breq	.-16     	; 0x297c <main+0x51c>
			HLCD_Send_char(first_digit);
    298c:	80 91 c9 00 	lds	r24, 0x00C9
    2990:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    2994:	fe 01       	movw	r30, r28
    2996:	e9 56       	subi	r30, 0x69	; 105
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a6 e9       	ldi	r26, 0x96	; 150
    29a0:	b3 e4       	ldi	r27, 0x43	; 67
    29a2:	80 83       	st	Z, r24
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	a2 83       	std	Z+2, r26	; 0x02
    29a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	8e 01       	movw	r16, r28
    29ac:	0d 56       	subi	r16, 0x6D	; 109
    29ae:	1f 4f       	sbci	r17, 0xFF	; 255
    29b0:	fe 01       	movw	r30, r28
    29b2:	e9 56       	subi	r30, 0x69	; 105
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	f8 01       	movw	r30, r16
    29d0:	80 83       	st	Z, r24
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	a2 83       	std	Z+2, r26	; 0x02
    29d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29d8:	fe 01       	movw	r30, r28
    29da:	ed 56       	subi	r30, 0x6D	; 109
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	44 f4       	brge	.+16     	; 0x2a06 <main+0x5a6>
		__ticks = 1;
    29f6:	fe 01       	movw	r30, r28
    29f8:	ef 56       	subi	r30, 0x6F	; 111
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
    2a04:	64 c0       	rjmp	.+200    	; 0x2ace <main+0x66e>
	else if (__tmp > 65535)
    2a06:	fe 01       	movw	r30, r28
    2a08:	ed 56       	subi	r30, 0x6D	; 109
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	0c f0       	brlt	.+2      	; 0x2a26 <main+0x5c6>
    2a24:	43 c0       	rjmp	.+134    	; 0x2aac <main+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a26:	fe 01       	movw	r30, r28
    2a28:	e9 56       	subi	r30, 0x69	; 105
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8e 01       	movw	r16, r28
    2a46:	0f 56       	subi	r16, 0x6F	; 111
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	f8 01       	movw	r30, r16
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	1f c0       	rjmp	.+62     	; 0x2a9c <main+0x63c>
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e1 57       	subi	r30, 0x71	; 113
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	88 ec       	ldi	r24, 0xC8	; 200
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e1 57       	subi	r30, 0x71	; 113
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x616>
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e1 57       	subi	r30, 0x71	; 113
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a84:	de 01       	movw	r26, r28
    2a86:	af 56       	subi	r26, 0x6F	; 111
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ef 56       	subi	r30, 0x6F	; 111
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	9c 93       	st	X, r25
    2a9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 56       	subi	r30, 0x6F	; 111
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	d1 f6       	brne	.-76     	; 0x2a5e <main+0x5fe>
    2aaa:	27 c0       	rjmp	.+78     	; 0x2afa <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	8e 01       	movw	r16, r28
    2aae:	0f 56       	subi	r16, 0x6F	; 111
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ed 56       	subi	r30, 0x6D	; 109
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	f8 01       	movw	r30, r16
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	80 83       	st	Z, r24
    2ace:	de 01       	movw	r26, r28
    2ad0:	a3 57       	subi	r26, 0x73	; 115
    2ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ef 56       	subi	r30, 0x6F	; 111
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	8d 93       	st	X+, r24
    2ae0:	9c 93       	st	X, r25
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e3 57       	subi	r30, 0x73	; 115
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <main+0x68c>
    2af0:	fe 01       	movw	r30, r28
    2af2:	e3 57       	subi	r30, 0x73	; 115
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
			_delay_ms(300);
			do
			{
				second_digit=Hkeypad_u8check_press();
    2afa:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    2afe:	80 93 ca 00 	sts	0x00CA, r24

			} while (second_digit==NOTPRESSED);
    2b02:	80 91 ca 00 	lds	r24, 0x00CA
    2b06:	8f 3f       	cpi	r24, 0xFF	; 255
    2b08:	c1 f3       	breq	.-16     	; 0x2afa <main+0x69a>
			HLCD_Send_char(second_digit);
    2b0a:	80 91 ca 00 	lds	r24, 0x00CA
    2b0e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    2b12:	fe 01       	movw	r30, r28
    2b14:	e7 57       	subi	r30, 0x77	; 119
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a6 e9       	ldi	r26, 0x96	; 150
    2b1e:	b3 e4       	ldi	r27, 0x43	; 67
    2b20:	80 83       	st	Z, r24
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	a2 83       	std	Z+2, r26	; 0x02
    2b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	8e 01       	movw	r16, r28
    2b2a:	0b 57       	subi	r16, 0x7B	; 123
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e7 57       	subi	r30, 0x77	; 119
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	60 81       	ld	r22, Z
    2b36:	71 81       	ldd	r23, Z+1	; 0x01
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a ef       	ldi	r20, 0xFA	; 250
    2b42:	54 e4       	ldi	r21, 0x44	; 68
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	80 83       	st	Z, r24
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	a2 83       	std	Z+2, r26	; 0x02
    2b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b56:	fe 01       	movw	r30, r28
    2b58:	eb 57       	subi	r30, 0x7B	; 123
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	44 f4       	brge	.+16     	; 0x2b84 <main+0x724>
		__ticks = 1;
    2b74:	fe 01       	movw	r30, r28
    2b76:	ed 57       	subi	r30, 0x7D	; 125
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	64 c0       	rjmp	.+200    	; 0x2c4c <main+0x7ec>
	else if (__tmp > 65535)
    2b84:	fe 01       	movw	r30, r28
    2b86:	eb 57       	subi	r30, 0x7B	; 123
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	4f e7       	ldi	r20, 0x7F	; 127
    2b98:	57 e4       	ldi	r21, 0x47	; 71
    2b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9e:	18 16       	cp	r1, r24
    2ba0:	0c f0       	brlt	.+2      	; 0x2ba4 <main+0x744>
    2ba2:	43 c0       	rjmp	.+134    	; 0x2c2a <main+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e7 57       	subi	r30, 0x77	; 119
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	0d 57       	subi	r16, 0x7D	; 125
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
    2bda:	1f c0       	rjmp	.+62     	; 0x2c1a <main+0x7ba>
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ef 57       	subi	r30, 0x7F	; 127
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	88 ec       	ldi	r24, 0xC8	; 200
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
    2bea:	fe 01       	movw	r30, r28
    2bec:	ef 57       	subi	r30, 0x7F	; 127
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <main+0x794>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 57       	subi	r30, 0x7F	; 127
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	de 01       	movw	r26, r28
    2c04:	ad 57       	subi	r26, 0x7D	; 125
    2c06:	bf 4f       	sbci	r27, 0xFF	; 255
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ed 57       	subi	r30, 0x7D	; 125
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	11 96       	adiw	r26, 0x01	; 1
    2c16:	9c 93       	st	X, r25
    2c18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 57       	subi	r30, 0x7D	; 125
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	d1 f6       	brne	.-76     	; 0x2bdc <main+0x77c>
    2c28:	27 c0       	rjmp	.+78     	; 0x2c78 <main+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	8e 01       	movw	r16, r28
    2c2c:	0d 57       	subi	r16, 0x7D	; 125
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	fe 01       	movw	r30, r28
    2c32:	eb 57       	subi	r30, 0x7B	; 123
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	f8 01       	movw	r30, r16
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
    2c4c:	de 01       	movw	r26, r28
    2c4e:	a1 58       	subi	r26, 0x81	; 129
    2c50:	bf 4f       	sbci	r27, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	ed 57       	subi	r30, 0x7D	; 125
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	8d 93       	st	X+, r24
    2c5e:	9c 93       	st	X, r25
    2c60:	fe 01       	movw	r30, r28
    2c62:	e1 58       	subi	r30, 0x81	; 129
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	91 81       	ldd	r25, Z+1	; 0x01
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <main+0x80a>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e1 58       	subi	r30, 0x81	; 129
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	80 83       	st	Z, r24
			_delay_ms(300);
			minutes_counter=(second_digit-48)
    2c78:	80 91 c9 00 	lds	r24, 0x00C9
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9c 01       	movw	r18, r24
    2c82:	22 0f       	add	r18, r18
    2c84:	33 1f       	adc	r19, r19
    2c86:	c9 01       	movw	r24, r18
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	82 0f       	add	r24, r18
    2c92:	93 1f       	adc	r25, r19
    2c94:	98 2f       	mov	r25, r24
    2c96:	80 91 ca 00 	lds	r24, 0x00CA
    2c9a:	89 0f       	add	r24, r25
    2c9c:	80 51       	subi	r24, 0x10	; 16
    2c9e:	80 93 c5 00 	sts	0x00C5, r24
						  +10*(first_digit-48);
			HLCD_clearscreen();
    2ca2:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>

			HLCD_Send_string("seconds=--");
    2ca6:	89 e8       	ldi	r24, 0x89	; 137
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
			HLCD_movecursor(1,9);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	69 e0       	ldi	r22, 0x09	; 9
    2cb2:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>

			do
			{
				first_digit=Hkeypad_u8check_press();
    2cb6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    2cba:	80 93 c9 00 	sts	0x00C9, r24

			} while (first_digit==NOTPRESSED);
    2cbe:	80 91 c9 00 	lds	r24, 0x00C9
    2cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc4:	c1 f3       	breq	.-16     	; 0x2cb6 <main+0x856>
			HLCD_Send_char(first_digit);
    2cc6:	80 91 c9 00 	lds	r24, 0x00C9
    2cca:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e5 58       	subi	r30, 0x85	; 133
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a6 e9       	ldi	r26, 0x96	; 150
    2cda:	b3 e4       	ldi	r27, 0x43	; 67
    2cdc:	80 83       	st	Z, r24
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	a2 83       	std	Z+2, r26	; 0x02
    2ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	09 58       	subi	r16, 0x89	; 137
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	fe 01       	movw	r30, r28
    2cec:	e5 58       	subi	r30, 0x85	; 133
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d12:	fe 01       	movw	r30, r28
    2d14:	e9 58       	subi	r30, 0x89	; 137
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	44 f4       	brge	.+16     	; 0x2d40 <main+0x8e0>
		__ticks = 1;
    2d30:	fe 01       	movw	r30, r28
    2d32:	eb 58       	subi	r30, 0x8B	; 139
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	64 c0       	rjmp	.+200    	; 0x2e08 <main+0x9a8>
	else if (__tmp > 65535)
    2d40:	fe 01       	movw	r30, r28
    2d42:	e9 58       	subi	r30, 0x89	; 137
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	0c f0       	brlt	.+2      	; 0x2d60 <main+0x900>
    2d5e:	43 c0       	rjmp	.+134    	; 0x2de6 <main+0x986>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	fe 01       	movw	r30, r28
    2d62:	e5 58       	subi	r30, 0x85	; 133
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8e 01       	movw	r16, r28
    2d80:	0b 58       	subi	r16, 0x8B	; 139
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	f8 01       	movw	r30, r16
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	1f c0       	rjmp	.+62     	; 0x2dd6 <main+0x976>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ed 58       	subi	r30, 0x8D	; 141
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	fe 01       	movw	r30, r28
    2da8:	ed 58       	subi	r30, 0x8D	; 141
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <main+0x950>
    2db4:	fe 01       	movw	r30, r28
    2db6:	ed 58       	subi	r30, 0x8D	; 141
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbe:	de 01       	movw	r26, r28
    2dc0:	ab 58       	subi	r26, 0x8B	; 139
    2dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	eb 58       	subi	r30, 0x8B	; 139
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	9c 93       	st	X, r25
    2dd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	eb 58       	subi	r30, 0x8B	; 139
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	d1 f6       	brne	.-76     	; 0x2d98 <main+0x938>
    2de4:	27 c0       	rjmp	.+78     	; 0x2e34 <main+0x9d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de6:	8e 01       	movw	r16, r28
    2de8:	0b 58       	subi	r16, 0x8B	; 139
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	fe 01       	movw	r30, r28
    2dee:	e9 58       	subi	r30, 0x89	; 137
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	f8 01       	movw	r30, r16
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	de 01       	movw	r26, r28
    2e0a:	af 58       	subi	r26, 0x8F	; 143
    2e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	eb 58       	subi	r30, 0x8B	; 139
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	91 81       	ldd	r25, Z+1	; 0x01
    2e18:	8d 93       	st	X+, r24
    2e1a:	9c 93       	st	X, r25
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ef 58       	subi	r30, 0x8F	; 143
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <main+0x9c6>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ef 58       	subi	r30, 0x8F	; 143
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
			_delay_ms(300);
			do
			{
				second_digit=Hkeypad_u8check_press();
    2e34:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Hkeypad_u8check_press>
    2e38:	80 93 ca 00 	sts	0x00CA, r24

			} while (second_digit==NOTPRESSED);
    2e3c:	80 91 ca 00 	lds	r24, 0x00CA
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	c1 f3       	breq	.-16     	; 0x2e34 <main+0x9d4>
			HLCD_Send_char(second_digit);
    2e44:	80 91 ca 00 	lds	r24, 0x00CA
    2e48:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HLCD_Send_char>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e3 59       	subi	r30, 0x93	; 147
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a6 e9       	ldi	r26, 0x96	; 150
    2e58:	b3 e4       	ldi	r27, 0x43	; 67
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	8e 01       	movw	r16, r28
    2e64:	07 59       	subi	r16, 0x97	; 151
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e3 59       	subi	r30, 0x93	; 147
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a ef       	ldi	r20, 0xFA	; 250
    2e7c:	54 e4       	ldi	r21, 0x44	; 68
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e7 59       	subi	r30, 0x97	; 151
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	44 f4       	brge	.+16     	; 0x2ebe <main+0xa5e>
		__ticks = 1;
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e9 59       	subi	r30, 0x99	; 153
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
    2ebc:	64 c0       	rjmp	.+200    	; 0x2f86 <main+0xb26>
	else if (__tmp > 65535)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e7 59       	subi	r30, 0x97	; 151
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	0c f0       	brlt	.+2      	; 0x2ede <main+0xa7e>
    2edc:	43 c0       	rjmp	.+134    	; 0x2f64 <main+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e3 59       	subi	r30, 0x93	; 147
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8e 01       	movw	r16, r28
    2efe:	09 59       	subi	r16, 0x99	; 153
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	1f c0       	rjmp	.+62     	; 0x2f54 <main+0xaf4>
    2f16:	fe 01       	movw	r30, r28
    2f18:	eb 59       	subi	r30, 0x9B	; 155
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	88 ec       	ldi	r24, 0xC8	; 200
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	fe 01       	movw	r30, r28
    2f26:	eb 59       	subi	r30, 0x9B	; 155
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	91 81       	ldd	r25, Z+1	; 0x01
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <main+0xace>
    2f32:	fe 01       	movw	r30, r28
    2f34:	eb 59       	subi	r30, 0x9B	; 155
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	de 01       	movw	r26, r28
    2f3e:	a9 59       	subi	r26, 0x99	; 153
    2f40:	bf 4f       	sbci	r27, 0xFF	; 255
    2f42:	fe 01       	movw	r30, r28
    2f44:	e9 59       	subi	r30, 0x99	; 153
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	11 96       	adiw	r26, 0x01	; 1
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e9 59       	subi	r30, 0x99	; 153
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	91 81       	ldd	r25, Z+1	; 0x01
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	d1 f6       	brne	.-76     	; 0x2f16 <main+0xab6>
    2f62:	27 c0       	rjmp	.+78     	; 0x2fb2 <main+0xb52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	8e 01       	movw	r16, r28
    2f66:	09 59       	subi	r16, 0x99	; 153
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e7 59       	subi	r30, 0x97	; 151
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	f8 01       	movw	r30, r16
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	de 01       	movw	r26, r28
    2f88:	ad 59       	subi	r26, 0x9D	; 157
    2f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e9 59       	subi	r30, 0x99	; 153
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	8d 93       	st	X+, r24
    2f98:	9c 93       	st	X, r25
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ed 59       	subi	r30, 0x9D	; 157
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <main+0xb44>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ed 59       	subi	r30, 0x9D	; 157
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
			_delay_ms(300);
			seconds_counter=(second_digit-48)
    2fb2:	80 91 c9 00 	lds	r24, 0x00C9
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9c 01       	movw	r18, r24
    2fbc:	22 0f       	add	r18, r18
    2fbe:	33 1f       	adc	r19, r19
    2fc0:	c9 01       	movw	r24, r18
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	82 0f       	add	r24, r18
    2fcc:	93 1f       	adc	r25, r19
    2fce:	98 2f       	mov	r25, r24
    2fd0:	80 91 ca 00 	lds	r24, 0x00CA
    2fd4:	89 0f       	add	r24, r25
    2fd6:	80 51       	subi	r24, 0x10	; 16
    2fd8:	80 93 c4 00 	sts	0x00C4, r24
						  +10*(first_digit-48);
			HLCD_clearscreen();
    2fdc:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>
			HLCD_Send_string("press 1 to");
    2fe0:	80 e6       	ldi	r24, 0x60	; 96
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
			HLCD_movecursor(2,1);
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>
			HLCD_Send_string("set clock");
    2ff0:	8b e6       	ldi	r24, 0x6B	; 107
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
    2ff8:	c7 c0       	rjmp	.+398    	; 0x3188 <main+0xd28>
		}
		else
		{
			HLCD_clearscreen();
    2ffa:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>
			HLCD_Send_string("wrong choice");
    2ffe:	84 e9       	ldi	r24, 0x94	; 148
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
    3006:	fe 01       	movw	r30, r28
    3008:	e1 5a       	subi	r30, 0xA1	; 161
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	aa e7       	ldi	r26, 0x7A	; 122
    3012:	b4 e4       	ldi	r27, 0x44	; 68
    3014:	80 83       	st	Z, r24
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	a2 83       	std	Z+2, r26	; 0x02
    301a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301c:	8e 01       	movw	r16, r28
    301e:	05 5a       	subi	r16, 0xA5	; 165
    3020:	1f 4f       	sbci	r17, 0xFF	; 255
    3022:	fe 01       	movw	r30, r28
    3024:	e1 5a       	subi	r30, 0xA1	; 161
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a ef       	ldi	r20, 0xFA	; 250
    3036:	54 e4       	ldi	r21, 0x44	; 68
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	f8 01       	movw	r30, r16
    3042:	80 83       	st	Z, r24
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	a2 83       	std	Z+2, r26	; 0x02
    3048:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    304a:	fe 01       	movw	r30, r28
    304c:	e5 5a       	subi	r30, 0xA5	; 165
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3064:	88 23       	and	r24, r24
    3066:	44 f4       	brge	.+16     	; 0x3078 <main+0xc18>
		__ticks = 1;
    3068:	fe 01       	movw	r30, r28
    306a:	e7 5a       	subi	r30, 0xA7	; 167
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
    3076:	64 c0       	rjmp	.+200    	; 0x3140 <main+0xce0>
	else if (__tmp > 65535)
    3078:	fe 01       	movw	r30, r28
    307a:	e5 5a       	subi	r30, 0xA5	; 165
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	0c f0       	brlt	.+2      	; 0x3098 <main+0xc38>
    3096:	43 c0       	rjmp	.+134    	; 0x311e <main+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3098:	fe 01       	movw	r30, r28
    309a:	e1 5a       	subi	r30, 0xA1	; 161
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	8e 01       	movw	r16, r28
    30b8:	07 5a       	subi	r16, 0xA7	; 167
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	f8 01       	movw	r30, r16
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
    30ce:	1f c0       	rjmp	.+62     	; 0x310e <main+0xcae>
    30d0:	fe 01       	movw	r30, r28
    30d2:	e9 5a       	subi	r30, 0xA9	; 169
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	88 ec       	ldi	r24, 0xC8	; 200
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	fe 01       	movw	r30, r28
    30e0:	e9 5a       	subi	r30, 0xA9	; 169
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <main+0xc88>
    30ec:	fe 01       	movw	r30, r28
    30ee:	e9 5a       	subi	r30, 0xA9	; 169
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f6:	de 01       	movw	r26, r28
    30f8:	a7 5a       	subi	r26, 0xA7	; 167
    30fa:	bf 4f       	sbci	r27, 0xFF	; 255
    30fc:	fe 01       	movw	r30, r28
    30fe:	e7 5a       	subi	r30, 0xA7	; 167
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	91 81       	ldd	r25, Z+1	; 0x01
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	11 96       	adiw	r26, 0x01	; 1
    310a:	9c 93       	st	X, r25
    310c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	fe 01       	movw	r30, r28
    3110:	e7 5a       	subi	r30, 0xA7	; 167
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	d1 f6       	brne	.-76     	; 0x30d0 <main+0xc70>
    311c:	27 c0       	rjmp	.+78     	; 0x316c <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	8e 01       	movw	r16, r28
    3120:	07 5a       	subi	r16, 0xA7	; 167
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5a       	subi	r30, 0xA5	; 165
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	f8 01       	movw	r30, r16
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24
    3140:	de 01       	movw	r26, r28
    3142:	ab 5a       	subi	r26, 0xAB	; 171
    3144:	bf 4f       	sbci	r27, 0xFF	; 255
    3146:	fe 01       	movw	r30, r28
    3148:	e7 5a       	subi	r30, 0xA7	; 167
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	8d 93       	st	X+, r24
    3152:	9c 93       	st	X, r25
    3154:	fe 01       	movw	r30, r28
    3156:	eb 5a       	subi	r30, 0xAB	; 171
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <main+0xcfe>
    3162:	fe 01       	movw	r30, r28
    3164:	eb 5a       	subi	r30, 0xAB	; 171
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	80 83       	st	Z, r24
			_delay_ms(1000);
			HLCD_clearscreen();
    316c:	0e 94 33 10 	call	0x2066	; 0x2066 <HLCD_clearscreen>
			HLCD_Send_string("press 1 to");
    3170:	80 e6       	ldi	r24, 0x60	; 96
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
			HLCD_movecursor(2,1);
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	61 e0       	ldi	r22, 0x01	; 1
    317c:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_movecursor>
			HLCD_Send_string("set clock");
    3180:	8b e6       	ldi	r24, 0x6B	; 107
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 17 10 	call	0x202e	; 0x202e <HLCD_Send_string>
		}
		}

		SET_BIT(DIO_PORTC_REG,1);
    3188:	a5 e3       	ldi	r26, 0x35	; 53
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	e5 e3       	ldi	r30, 0x35	; 53
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	82 60       	ori	r24, 0x02	; 2
    3194:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,2);
    3196:	a5 e3       	ldi	r26, 0x35	; 53
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e5 e3       	ldi	r30, 0x35	; 53
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	84 60       	ori	r24, 0x04	; 4
    31a2:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,3);
    31a4:	a5 e3       	ldi	r26, 0x35	; 53
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e5 e3       	ldi	r30, 0x35	; 53
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	88 60       	ori	r24, 0x08	; 8
    31b0:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,4);
    31b2:	a5 e3       	ldi	r26, 0x35	; 53
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e5 e3       	ldi	r30, 0x35	; 53
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	80 61       	ori	r24, 0x10	; 16
    31be:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,5);
    31c0:	a5 e3       	ldi	r26, 0x35	; 53
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e5 e3       	ldi	r30, 0x35	; 53
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	80 62       	ori	r24, 0x20	; 32
    31cc:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,0);
    31ce:	a5 e3       	ldi	r26, 0x35	; 53
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e5 e3       	ldi	r30, 0x35	; 53
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	8e 7f       	andi	r24, 0xFE	; 254
    31da:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,seconds_counter%10);
    31dc:	80 91 c4 00 	lds	r24, 0x00C4
    31e0:	9a e0       	ldi	r25, 0x0A	; 10
    31e2:	69 2f       	mov	r22, r25
    31e4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    31e8:	89 2f       	mov	r24, r25
    31ea:	98 2f       	mov	r25, r24
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	69 2f       	mov	r22, r25
    31f0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    31f4:	fe 01       	movw	r30, r28
    31f6:	ef 5a       	subi	r30, 0xAF	; 175
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3200:	b0 e4       	ldi	r27, 0x40	; 64
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	a2 83       	std	Z+2, r26	; 0x02
    3208:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320a:	8e 01       	movw	r16, r28
    320c:	03 5b       	subi	r16, 0xB3	; 179
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	fe 01       	movw	r30, r28
    3212:	ef 5a       	subi	r30, 0xAF	; 175
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a ef       	ldi	r20, 0xFA	; 250
    3224:	54 e4       	ldi	r21, 0x44	; 68
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	f8 01       	movw	r30, r16
    3230:	80 83       	st	Z, r24
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	a2 83       	std	Z+2, r26	; 0x02
    3236:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3238:	fe 01       	movw	r30, r28
    323a:	e3 5b       	subi	r30, 0xB3	; 179
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	44 f4       	brge	.+16     	; 0x3266 <main+0xe06>
		__ticks = 1;
    3256:	fe 01       	movw	r30, r28
    3258:	e5 5b       	subi	r30, 0xB5	; 181
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
    3264:	64 c0       	rjmp	.+200    	; 0x332e <main+0xece>
	else if (__tmp > 65535)
    3266:	fe 01       	movw	r30, r28
    3268:	e3 5b       	subi	r30, 0xB3	; 179
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	0c f0       	brlt	.+2      	; 0x3286 <main+0xe26>
    3284:	43 c0       	rjmp	.+134    	; 0x330c <main+0xeac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	fe 01       	movw	r30, r28
    3288:	ef 5a       	subi	r30, 0xAF	; 175
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e2       	ldi	r20, 0x20	; 32
    329a:	51 e4       	ldi	r21, 0x41	; 65
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	8e 01       	movw	r16, r28
    32a6:	05 5b       	subi	r16, 0xB5	; 181
    32a8:	1f 4f       	sbci	r17, 0xFF	; 255
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	f8 01       	movw	r30, r16
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	1f c0       	rjmp	.+62     	; 0x32fc <main+0xe9c>
    32be:	fe 01       	movw	r30, r28
    32c0:	e7 5b       	subi	r30, 0xB7	; 183
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	88 ec       	ldi	r24, 0xC8	; 200
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
    32cc:	fe 01       	movw	r30, r28
    32ce:	e7 5b       	subi	r30, 0xB7	; 183
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <main+0xe76>
    32da:	fe 01       	movw	r30, r28
    32dc:	e7 5b       	subi	r30, 0xB7	; 183
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e4:	de 01       	movw	r26, r28
    32e6:	a5 5b       	subi	r26, 0xB5	; 181
    32e8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	e5 5b       	subi	r30, 0xB5	; 181
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	11 96       	adiw	r26, 0x01	; 1
    32f8:	9c 93       	st	X, r25
    32fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	fe 01       	movw	r30, r28
    32fe:	e5 5b       	subi	r30, 0xB5	; 181
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	d1 f6       	brne	.-76     	; 0x32be <main+0xe5e>
    330a:	27 c0       	rjmp	.+78     	; 0x335a <main+0xefa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	8e 01       	movw	r16, r28
    330e:	05 5b       	subi	r16, 0xB5	; 181
    3310:	1f 4f       	sbci	r17, 0xFF	; 255
    3312:	fe 01       	movw	r30, r28
    3314:	e3 5b       	subi	r30, 0xB3	; 179
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	60 81       	ld	r22, Z
    331a:	71 81       	ldd	r23, Z+1	; 0x01
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	f8 01       	movw	r30, r16
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
    332e:	de 01       	movw	r26, r28
    3330:	a9 5b       	subi	r26, 0xB9	; 185
    3332:	bf 4f       	sbci	r27, 0xFF	; 255
    3334:	fe 01       	movw	r30, r28
    3336:	e5 5b       	subi	r30, 0xB5	; 181
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	8d 93       	st	X+, r24
    3340:	9c 93       	st	X, r25
    3342:	fe 01       	movw	r30, r28
    3344:	e9 5b       	subi	r30, 0xB9	; 185
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <main+0xeec>
    3350:	fe 01       	movw	r30, r28
    3352:	e9 5b       	subi	r30, 0xB9	; 185
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
		_delay_ms(5);

        SET_BIT(DIO_PORTC_REG,0);
    335a:	a5 e3       	ldi	r26, 0x35	; 53
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	e5 e3       	ldi	r30, 0x35	; 53
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	81 60       	ori	r24, 0x01	; 1
    3366:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,2);
    3368:	a5 e3       	ldi	r26, 0x35	; 53
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e5 e3       	ldi	r30, 0x35	; 53
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	84 60       	ori	r24, 0x04	; 4
    3374:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,3);
    3376:	a5 e3       	ldi	r26, 0x35	; 53
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	e5 e3       	ldi	r30, 0x35	; 53
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	88 60       	ori	r24, 0x08	; 8
    3382:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,4);
    3384:	a5 e3       	ldi	r26, 0x35	; 53
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e5 e3       	ldi	r30, 0x35	; 53
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	80 61       	ori	r24, 0x10	; 16
    3390:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,5);
    3392:	a5 e3       	ldi	r26, 0x35	; 53
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e5 e3       	ldi	r30, 0x35	; 53
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	80 62       	ori	r24, 0x20	; 32
    339e:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,1);
    33a0:	a5 e3       	ldi	r26, 0x35	; 53
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	e5 e3       	ldi	r30, 0x35	; 53
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	8d 7f       	andi	r24, 0xFD	; 253
    33ac:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,seconds_counter/10);
    33ae:	80 91 c4 00 	lds	r24, 0x00C4
    33b2:	9a e0       	ldi	r25, 0x0A	; 10
    33b4:	69 2f       	mov	r22, r25
    33b6:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    33ba:	98 2f       	mov	r25, r24
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	69 2f       	mov	r22, r25
    33c0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    33c4:	fe 01       	movw	r30, r28
    33c6:	ed 5b       	subi	r30, 0xBD	; 189
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 ea       	ldi	r26, 0xA0	; 160
    33d0:	b0 e4       	ldi	r27, 0x40	; 64
    33d2:	80 83       	st	Z, r24
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	a2 83       	std	Z+2, r26	; 0x02
    33d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	8e 01       	movw	r16, r28
    33dc:	01 5c       	subi	r16, 0xC1	; 193
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	fe 01       	movw	r30, r28
    33e2:	ed 5b       	subi	r30, 0xBD	; 189
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	60 81       	ld	r22, Z
    33e8:	71 81       	ldd	r23, Z+1	; 0x01
    33ea:	82 81       	ldd	r24, Z+2	; 0x02
    33ec:	93 81       	ldd	r25, Z+3	; 0x03
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a ef       	ldi	r20, 0xFA	; 250
    33f4:	54 e4       	ldi	r21, 0x44	; 68
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	f8 01       	movw	r30, r16
    3400:	80 83       	st	Z, r24
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	a2 83       	std	Z+2, r26	; 0x02
    3406:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3408:	fe 01       	movw	r30, r28
    340a:	ff 96       	adiw	r30, 0x3f	; 63
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e8       	ldi	r20, 0x80	; 128
    341a:	5f e3       	ldi	r21, 0x3F	; 63
    341c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3420:	88 23       	and	r24, r24
    3422:	2c f4       	brge	.+10     	; 0x342e <main+0xfce>
		__ticks = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9e af       	std	Y+62, r25	; 0x3e
    342a:	8d af       	std	Y+61, r24	; 0x3d
    342c:	46 c0       	rjmp	.+140    	; 0x34ba <main+0x105a>
	else if (__tmp > 65535)
    342e:	fe 01       	movw	r30, r28
    3430:	ff 96       	adiw	r30, 0x3f	; 63
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	64 f5       	brge	.+88     	; 0x34a2 <main+0x1042>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	fe 01       	movw	r30, r28
    344c:	ed 5b       	subi	r30, 0xBD	; 189
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9e af       	std	Y+62, r25	; 0x3e
    3476:	8d af       	std	Y+61, r24	; 0x3d
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <main+0x1038>
    347a:	88 ec       	ldi	r24, 0xC8	; 200
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	9c af       	std	Y+60, r25	; 0x3c
    3480:	8b af       	std	Y+59, r24	; 0x3b
    3482:	8b ad       	ldd	r24, Y+59	; 0x3b
    3484:	9c ad       	ldd	r25, Y+60	; 0x3c
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <main+0x1026>
    348a:	9c af       	std	Y+60, r25	; 0x3c
    348c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3490:	9e ad       	ldd	r25, Y+62	; 0x3e
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	9e af       	std	Y+62, r25	; 0x3e
    3496:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3498:	8d ad       	ldd	r24, Y+61	; 0x3d
    349a:	9e ad       	ldd	r25, Y+62	; 0x3e
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	69 f7       	brne	.-38     	; 0x347a <main+0x101a>
    34a0:	16 c0       	rjmp	.+44     	; 0x34ce <main+0x106e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a2:	fe 01       	movw	r30, r28
    34a4:	ff 96       	adiw	r30, 0x3f	; 63
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	9e af       	std	Y+62, r25	; 0x3e
    34b8:	8d af       	std	Y+61, r24	; 0x3d
    34ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    34bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    34be:	9a af       	std	Y+58, r25	; 0x3a
    34c0:	89 af       	std	Y+57, r24	; 0x39
    34c2:	89 ad       	ldd	r24, Y+57	; 0x39
    34c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <main+0x1066>
    34ca:	9a af       	std	Y+58, r25	; 0x3a
    34cc:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);

		SET_BIT(DIO_PORTC_REG,0);
    34ce:	a5 e3       	ldi	r26, 0x35	; 53
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e5 e3       	ldi	r30, 0x35	; 53
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	81 60       	ori	r24, 0x01	; 1
    34da:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,1);
    34dc:	a5 e3       	ldi	r26, 0x35	; 53
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e5 e3       	ldi	r30, 0x35	; 53
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	82 60       	ori	r24, 0x02	; 2
    34e8:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,3);
    34ea:	a5 e3       	ldi	r26, 0x35	; 53
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e5 e3       	ldi	r30, 0x35	; 53
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	88 60       	ori	r24, 0x08	; 8
    34f6:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,4);
    34f8:	a5 e3       	ldi	r26, 0x35	; 53
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e5 e3       	ldi	r30, 0x35	; 53
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	80 61       	ori	r24, 0x10	; 16
    3504:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,5);
    3506:	a5 e3       	ldi	r26, 0x35	; 53
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e5 e3       	ldi	r30, 0x35	; 53
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	80 62       	ori	r24, 0x20	; 32
    3512:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,2);
    3514:	a5 e3       	ldi	r26, 0x35	; 53
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e5 e3       	ldi	r30, 0x35	; 53
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	8b 7f       	andi	r24, 0xFB	; 251
    3520:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,minutes_counter%10);
    3522:	80 91 c5 00 	lds	r24, 0x00C5
    3526:	9a e0       	ldi	r25, 0x0A	; 10
    3528:	69 2f       	mov	r22, r25
    352a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    352e:	89 2f       	mov	r24, r25
    3530:	98 2f       	mov	r25, r24
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	69 2f       	mov	r22, r25
    3536:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 ea       	ldi	r26, 0xA0	; 160
    3540:	b0 e4       	ldi	r27, 0x40	; 64
    3542:	8d ab       	std	Y+53, r24	; 0x35
    3544:	9e ab       	std	Y+54, r25	; 0x36
    3546:	af ab       	std	Y+55, r26	; 0x37
    3548:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354a:	6d a9       	ldd	r22, Y+53	; 0x35
    354c:	7e a9       	ldd	r23, Y+54	; 0x36
    354e:	8f a9       	ldd	r24, Y+55	; 0x37
    3550:	98 ad       	ldd	r25, Y+56	; 0x38
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	4a ef       	ldi	r20, 0xFA	; 250
    3558:	54 e4       	ldi	r21, 0x44	; 68
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	89 ab       	std	Y+49, r24	; 0x31
    3564:	9a ab       	std	Y+50, r25	; 0x32
    3566:	ab ab       	std	Y+51, r26	; 0x33
    3568:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    356a:	69 a9       	ldd	r22, Y+49	; 0x31
    356c:	7a a9       	ldd	r23, Y+50	; 0x32
    356e:	8b a9       	ldd	r24, Y+51	; 0x33
    3570:	9c a9       	ldd	r25, Y+52	; 0x34
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e8       	ldi	r20, 0x80	; 128
    3578:	5f e3       	ldi	r21, 0x3F	; 63
    357a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    357e:	88 23       	and	r24, r24
    3580:	2c f4       	brge	.+10     	; 0x358c <main+0x112c>
		__ticks = 1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	98 ab       	std	Y+48, r25	; 0x30
    3588:	8f a7       	std	Y+47, r24	; 0x2f
    358a:	3f c0       	rjmp	.+126    	; 0x360a <main+0x11aa>
	else if (__tmp > 65535)
    358c:	69 a9       	ldd	r22, Y+49	; 0x31
    358e:	7a a9       	ldd	r23, Y+50	; 0x32
    3590:	8b a9       	ldd	r24, Y+51	; 0x33
    3592:	9c a9       	ldd	r25, Y+52	; 0x34
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	3f ef       	ldi	r19, 0xFF	; 255
    3598:	4f e7       	ldi	r20, 0x7F	; 127
    359a:	57 e4       	ldi	r21, 0x47	; 71
    359c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a0:	18 16       	cp	r1, r24
    35a2:	4c f5       	brge	.+82     	; 0x35f6 <main+0x1196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a4:	6d a9       	ldd	r22, Y+53	; 0x35
    35a6:	7e a9       	ldd	r23, Y+54	; 0x36
    35a8:	8f a9       	ldd	r24, Y+55	; 0x37
    35aa:	98 ad       	ldd	r25, Y+56	; 0x38
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e2       	ldi	r20, 0x20	; 32
    35b2:	51 e4       	ldi	r21, 0x41	; 65
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	bc 01       	movw	r22, r24
    35be:	cd 01       	movw	r24, r26
    35c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	98 ab       	std	Y+48, r25	; 0x30
    35ca:	8f a7       	std	Y+47, r24	; 0x2f
    35cc:	0f c0       	rjmp	.+30     	; 0x35ec <main+0x118c>
    35ce:	88 ec       	ldi	r24, 0xC8	; 200
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e a7       	std	Y+46, r25	; 0x2e
    35d4:	8d a7       	std	Y+45, r24	; 0x2d
    35d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    35d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <main+0x117a>
    35de:	9e a7       	std	Y+46, r25	; 0x2e
    35e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e4:	98 a9       	ldd	r25, Y+48	; 0x30
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	98 ab       	std	Y+48, r25	; 0x30
    35ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ee:	98 a9       	ldd	r25, Y+48	; 0x30
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	69 f7       	brne	.-38     	; 0x35ce <main+0x116e>
    35f4:	14 c0       	rjmp	.+40     	; 0x361e <main+0x11be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f6:	69 a9       	ldd	r22, Y+49	; 0x31
    35f8:	7a a9       	ldd	r23, Y+50	; 0x32
    35fa:	8b a9       	ldd	r24, Y+51	; 0x33
    35fc:	9c a9       	ldd	r25, Y+52	; 0x34
    35fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	98 ab       	std	Y+48, r25	; 0x30
    3608:	8f a7       	std	Y+47, r24	; 0x2f
    360a:	8f a5       	ldd	r24, Y+47	; 0x2f
    360c:	98 a9       	ldd	r25, Y+48	; 0x30
    360e:	9c a7       	std	Y+44, r25	; 0x2c
    3610:	8b a7       	std	Y+43, r24	; 0x2b
    3612:	8b a5       	ldd	r24, Y+43	; 0x2b
    3614:	9c a5       	ldd	r25, Y+44	; 0x2c
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <main+0x11b6>
    361a:	9c a7       	std	Y+44, r25	; 0x2c
    361c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

		SET_BIT(DIO_PORTC_REG,0);
    361e:	a5 e3       	ldi	r26, 0x35	; 53
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e5 e3       	ldi	r30, 0x35	; 53
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	81 60       	ori	r24, 0x01	; 1
    362a:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,1);
    362c:	a5 e3       	ldi	r26, 0x35	; 53
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e5 e3       	ldi	r30, 0x35	; 53
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	82 60       	ori	r24, 0x02	; 2
    3638:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,2);
    363a:	a5 e3       	ldi	r26, 0x35	; 53
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e5 e3       	ldi	r30, 0x35	; 53
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	84 60       	ori	r24, 0x04	; 4
    3646:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,4);
    3648:	a5 e3       	ldi	r26, 0x35	; 53
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e5 e3       	ldi	r30, 0x35	; 53
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	80 61       	ori	r24, 0x10	; 16
    3654:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,5);
    3656:	a5 e3       	ldi	r26, 0x35	; 53
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e5 e3       	ldi	r30, 0x35	; 53
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	80 62       	ori	r24, 0x20	; 32
    3662:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,3);
    3664:	a5 e3       	ldi	r26, 0x35	; 53
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e5 e3       	ldi	r30, 0x35	; 53
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	87 7f       	andi	r24, 0xF7	; 247
    3670:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,minutes_counter/10);
    3672:	80 91 c5 00 	lds	r24, 0x00C5
    3676:	9a e0       	ldi	r25, 0x0A	; 10
    3678:	69 2f       	mov	r22, r25
    367a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    367e:	98 2f       	mov	r25, r24
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	69 2f       	mov	r22, r25
    3684:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	a0 ea       	ldi	r26, 0xA0	; 160
    368e:	b0 e4       	ldi	r27, 0x40	; 64
    3690:	8f a3       	std	Y+39, r24	; 0x27
    3692:	98 a7       	std	Y+40, r25	; 0x28
    3694:	a9 a7       	std	Y+41, r26	; 0x29
    3696:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3698:	6f a1       	ldd	r22, Y+39	; 0x27
    369a:	78 a5       	ldd	r23, Y+40	; 0x28
    369c:	89 a5       	ldd	r24, Y+41	; 0x29
    369e:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	4a ef       	ldi	r20, 0xFA	; 250
    36a6:	54 e4       	ldi	r21, 0x44	; 68
    36a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	8b a3       	std	Y+35, r24	; 0x23
    36b2:	9c a3       	std	Y+36, r25	; 0x24
    36b4:	ad a3       	std	Y+37, r26	; 0x25
    36b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36b8:	6b a1       	ldd	r22, Y+35	; 0x23
    36ba:	7c a1       	ldd	r23, Y+36	; 0x24
    36bc:	8d a1       	ldd	r24, Y+37	; 0x25
    36be:	9e a1       	ldd	r25, Y+38	; 0x26
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e8       	ldi	r20, 0x80	; 128
    36c6:	5f e3       	ldi	r21, 0x3F	; 63
    36c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36cc:	88 23       	and	r24, r24
    36ce:	2c f4       	brge	.+10     	; 0x36da <main+0x127a>
		__ticks = 1;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	9a a3       	std	Y+34, r25	; 0x22
    36d6:	89 a3       	std	Y+33, r24	; 0x21
    36d8:	3f c0       	rjmp	.+126    	; 0x3758 <main+0x12f8>
	else if (__tmp > 65535)
    36da:	6b a1       	ldd	r22, Y+35	; 0x23
    36dc:	7c a1       	ldd	r23, Y+36	; 0x24
    36de:	8d a1       	ldd	r24, Y+37	; 0x25
    36e0:	9e a1       	ldd	r25, Y+38	; 0x26
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	3f ef       	ldi	r19, 0xFF	; 255
    36e6:	4f e7       	ldi	r20, 0x7F	; 127
    36e8:	57 e4       	ldi	r21, 0x47	; 71
    36ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ee:	18 16       	cp	r1, r24
    36f0:	4c f5       	brge	.+82     	; 0x3744 <main+0x12e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f2:	6f a1       	ldd	r22, Y+39	; 0x27
    36f4:	78 a5       	ldd	r23, Y+40	; 0x28
    36f6:	89 a5       	ldd	r24, Y+41	; 0x29
    36f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	9a a3       	std	Y+34, r25	; 0x22
    3718:	89 a3       	std	Y+33, r24	; 0x21
    371a:	0f c0       	rjmp	.+30     	; 0x373a <main+0x12da>
    371c:	88 ec       	ldi	r24, 0xC8	; 200
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	98 a3       	std	Y+32, r25	; 0x20
    3722:	8f 8f       	std	Y+31, r24	; 0x1f
    3724:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3726:	98 a1       	ldd	r25, Y+32	; 0x20
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <main+0x12c8>
    372c:	98 a3       	std	Y+32, r25	; 0x20
    372e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3730:	89 a1       	ldd	r24, Y+33	; 0x21
    3732:	9a a1       	ldd	r25, Y+34	; 0x22
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	9a a3       	std	Y+34, r25	; 0x22
    3738:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373a:	89 a1       	ldd	r24, Y+33	; 0x21
    373c:	9a a1       	ldd	r25, Y+34	; 0x22
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	69 f7       	brne	.-38     	; 0x371c <main+0x12bc>
    3742:	14 c0       	rjmp	.+40     	; 0x376c <main+0x130c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3744:	6b a1       	ldd	r22, Y+35	; 0x23
    3746:	7c a1       	ldd	r23, Y+36	; 0x24
    3748:	8d a1       	ldd	r24, Y+37	; 0x25
    374a:	9e a1       	ldd	r25, Y+38	; 0x26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9a a3       	std	Y+34, r25	; 0x22
    3756:	89 a3       	std	Y+33, r24	; 0x21
    3758:	89 a1       	ldd	r24, Y+33	; 0x21
    375a:	9a a1       	ldd	r25, Y+34	; 0x22
    375c:	9e 8f       	std	Y+30, r25	; 0x1e
    375e:	8d 8f       	std	Y+29, r24	; 0x1d
    3760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3762:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <main+0x1304>
    3768:	9e 8f       	std	Y+30, r25	; 0x1e
    376a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

		SET_BIT(DIO_PORTC_REG,0);
    376c:	a5 e3       	ldi	r26, 0x35	; 53
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e5 e3       	ldi	r30, 0x35	; 53
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	81 60       	ori	r24, 0x01	; 1
    3778:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,1);
    377a:	a5 e3       	ldi	r26, 0x35	; 53
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	e5 e3       	ldi	r30, 0x35	; 53
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	82 60       	ori	r24, 0x02	; 2
    3786:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,2);
    3788:	a5 e3       	ldi	r26, 0x35	; 53
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	e5 e3       	ldi	r30, 0x35	; 53
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	84 60       	ori	r24, 0x04	; 4
    3794:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,3);
    3796:	a5 e3       	ldi	r26, 0x35	; 53
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	e5 e3       	ldi	r30, 0x35	; 53
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 81       	ld	r24, Z
    37a0:	88 60       	ori	r24, 0x08	; 8
    37a2:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,5);
    37a4:	a5 e3       	ldi	r26, 0x35	; 53
    37a6:	b0 e0       	ldi	r27, 0x00	; 0
    37a8:	e5 e3       	ldi	r30, 0x35	; 53
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	80 81       	ld	r24, Z
    37ae:	80 62       	ori	r24, 0x20	; 32
    37b0:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,4);
    37b2:	a5 e3       	ldi	r26, 0x35	; 53
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e5 e3       	ldi	r30, 0x35	; 53
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	8f 7e       	andi	r24, 0xEF	; 239
    37be:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,hours_counter%10);
    37c0:	80 91 c6 00 	lds	r24, 0x00C6
    37c4:	9a e0       	ldi	r25, 0x0A	; 10
    37c6:	69 2f       	mov	r22, r25
    37c8:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    37cc:	89 2f       	mov	r24, r25
    37ce:	98 2f       	mov	r25, r24
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	69 2f       	mov	r22, r25
    37d4:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 ea       	ldi	r26, 0xA0	; 160
    37de:	b0 e4       	ldi	r27, 0x40	; 64
    37e0:	89 8f       	std	Y+25, r24	; 0x19
    37e2:	9a 8f       	std	Y+26, r25	; 0x1a
    37e4:	ab 8f       	std	Y+27, r26	; 0x1b
    37e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	69 8d       	ldd	r22, Y+25	; 0x19
    37ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8d 8b       	std	Y+21, r24	; 0x15
    3802:	9e 8b       	std	Y+22, r25	; 0x16
    3804:	af 8b       	std	Y+23, r26	; 0x17
    3806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3808:	6d 89       	ldd	r22, Y+21	; 0x15
    380a:	7e 89       	ldd	r23, Y+22	; 0x16
    380c:	8f 89       	ldd	r24, Y+23	; 0x17
    380e:	98 8d       	ldd	r25, Y+24	; 0x18
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <main+0x13ca>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9c 8b       	std	Y+20, r25	; 0x14
    3826:	8b 8b       	std	Y+19, r24	; 0x13
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <main+0x1448>
	else if (__tmp > 65535)
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <main+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	69 8d       	ldd	r22, Y+25	; 0x19
    3844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	9c 8b       	std	Y+20, r25	; 0x14
    3868:	8b 8b       	std	Y+19, r24	; 0x13
    386a:	0f c0       	rjmp	.+30     	; 0x388a <main+0x142a>
    386c:	88 ec       	ldi	r24, 0xC8	; 200
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
    3874:	89 89       	ldd	r24, Y+17	; 0x11
    3876:	9a 89       	ldd	r25, Y+18	; 0x12
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <main+0x1418>
    387c:	9a 8b       	std	Y+18, r25	; 0x12
    387e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9c 8b       	std	Y+20, r25	; 0x14
    3888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	8b 89       	ldd	r24, Y+19	; 0x13
    388c:	9c 89       	ldd	r25, Y+20	; 0x14
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <main+0x140c>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <main+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	6d 89       	ldd	r22, Y+21	; 0x15
    3896:	7e 89       	ldd	r23, Y+22	; 0x16
    3898:	8f 89       	ldd	r24, Y+23	; 0x17
    389a:	98 8d       	ldd	r25, Y+24	; 0x18
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	8b 89       	ldd	r24, Y+19	; 0x13
    38aa:	9c 89       	ldd	r25, Y+20	; 0x14
    38ac:	98 8b       	std	Y+16, r25	; 0x10
    38ae:	8f 87       	std	Y+15, r24	; 0x0f
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	98 89       	ldd	r25, Y+16	; 0x10
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <main+0x1454>
    38b8:	98 8b       	std	Y+16, r25	; 0x10
    38ba:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		SET_BIT(DIO_PORTC_REG,0);
    38bc:	a5 e3       	ldi	r26, 0x35	; 53
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e5 e3       	ldi	r30, 0x35	; 53
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	81 60       	ori	r24, 0x01	; 1
    38c8:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,1);
    38ca:	a5 e3       	ldi	r26, 0x35	; 53
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	e5 e3       	ldi	r30, 0x35	; 53
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	82 60       	ori	r24, 0x02	; 2
    38d6:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,2);
    38d8:	a5 e3       	ldi	r26, 0x35	; 53
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e5 e3       	ldi	r30, 0x35	; 53
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	84 60       	ori	r24, 0x04	; 4
    38e4:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,3);
    38e6:	a5 e3       	ldi	r26, 0x35	; 53
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e5 e3       	ldi	r30, 0x35	; 53
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	88 60       	ori	r24, 0x08	; 8
    38f2:	8c 93       	st	X, r24
		SET_BIT(DIO_PORTC_REG,4);
    38f4:	a5 e3       	ldi	r26, 0x35	; 53
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e5 e3       	ldi	r30, 0x35	; 53
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 61       	ori	r24, 0x10	; 16
    3900:	8c 93       	st	X, r24
		CLR_BIT(DIO_PORTC_REG,5);
    3902:	a5 e3       	ldi	r26, 0x35	; 53
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	e5 e3       	ldi	r30, 0x35	; 53
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	8f 7d       	andi	r24, 0xDF	; 223
    390e:	8c 93       	st	X, r24
		Hseven_seg_write(PORTB,hours_counter/10);
    3910:	80 91 c6 00 	lds	r24, 0x00C6
    3914:	9a e0       	ldi	r25, 0x0A	; 10
    3916:	69 2f       	mov	r22, r25
    3918:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__udivmodqi4>
    391c:	98 2f       	mov	r25, r24
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	69 2f       	mov	r22, r25
    3922:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Hseven_seg_write>
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	a0 ea       	ldi	r26, 0xA0	; 160
    392c:	b0 e4       	ldi	r27, 0x40	; 64
    392e:	8b 87       	std	Y+11, r24	; 0x0b
    3930:	9c 87       	std	Y+12, r25	; 0x0c
    3932:	ad 87       	std	Y+13, r26	; 0x0d
    3934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3936:	6b 85       	ldd	r22, Y+11	; 0x0b
    3938:	7c 85       	ldd	r23, Y+12	; 0x0c
    393a:	8d 85       	ldd	r24, Y+13	; 0x0d
    393c:	9e 85       	ldd	r25, Y+14	; 0x0e
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	4a ef       	ldi	r20, 0xFA	; 250
    3944:	54 e4       	ldi	r21, 0x44	; 68
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	8f 83       	std	Y+7, r24	; 0x07
    3950:	98 87       	std	Y+8, r25	; 0x08
    3952:	a9 87       	std	Y+9, r26	; 0x09
    3954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3956:	6f 81       	ldd	r22, Y+7	; 0x07
    3958:	78 85       	ldd	r23, Y+8	; 0x08
    395a:	89 85       	ldd	r24, Y+9	; 0x09
    395c:	9a 85       	ldd	r25, Y+10	; 0x0a
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e8       	ldi	r20, 0x80	; 128
    3964:	5f e3       	ldi	r21, 0x3F	; 63
    3966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    396a:	88 23       	and	r24, r24
    396c:	2c f4       	brge	.+10     	; 0x3978 <main+0x1518>
		__ticks = 1;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	9e 83       	std	Y+6, r25	; 0x06
    3974:	8d 83       	std	Y+5, r24	; 0x05
    3976:	3f c0       	rjmp	.+126    	; 0x39f6 <main+0x1596>
	else if (__tmp > 65535)
    3978:	6f 81       	ldd	r22, Y+7	; 0x07
    397a:	78 85       	ldd	r23, Y+8	; 0x08
    397c:	89 85       	ldd	r24, Y+9	; 0x09
    397e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	3f ef       	ldi	r19, 0xFF	; 255
    3984:	4f e7       	ldi	r20, 0x7F	; 127
    3986:	57 e4       	ldi	r21, 0x47	; 71
    3988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    398c:	18 16       	cp	r1, r24
    398e:	4c f5       	brge	.+82     	; 0x39e2 <main+0x1582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3990:	6b 85       	ldd	r22, Y+11	; 0x0b
    3992:	7c 85       	ldd	r23, Y+12	; 0x0c
    3994:	8d 85       	ldd	r24, Y+13	; 0x0d
    3996:	9e 85       	ldd	r25, Y+14	; 0x0e
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e2       	ldi	r20, 0x20	; 32
    399e:	51 e4       	ldi	r21, 0x41	; 65
    39a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	9e 83       	std	Y+6, r25	; 0x06
    39b6:	8d 83       	std	Y+5, r24	; 0x05
    39b8:	0f c0       	rjmp	.+30     	; 0x39d8 <main+0x1578>
    39ba:	88 ec       	ldi	r24, 0xC8	; 200
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	9c 83       	std	Y+4, r25	; 0x04
    39c0:	8b 83       	std	Y+3, r24	; 0x03
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	9c 81       	ldd	r25, Y+4	; 0x04
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <main+0x1566>
    39ca:	9c 83       	std	Y+4, r25	; 0x04
    39cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	9e 83       	std	Y+6, r25	; 0x06
    39d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d8:	8d 81       	ldd	r24, Y+5	; 0x05
    39da:	9e 81       	ldd	r25, Y+6	; 0x06
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	69 f7       	brne	.-38     	; 0x39ba <main+0x155a>
    39e0:	14 c0       	rjmp	.+40     	; 0x3a0a <main+0x15aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e2:	6f 81       	ldd	r22, Y+7	; 0x07
    39e4:	78 85       	ldd	r23, Y+8	; 0x08
    39e6:	89 85       	ldd	r24, Y+9	; 0x09
    39e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	01 97       	sbiw	r24, 0x01	; 1
    3a04:	f1 f7       	brne	.-4      	; 0x3a02 <main+0x15a2>
    3a06:	9a 83       	std	Y+2, r25	; 0x02
    3a08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

		if (seconds_counter==60)
    3a0a:	80 91 c4 00 	lds	r24, 0x00C4
    3a0e:	8c 33       	cpi	r24, 0x3C	; 60
    3a10:	39 f4       	brne	.+14     	; 0x3a20 <main+0x15c0>
		{
			seconds_counter=0;
    3a12:	10 92 c4 00 	sts	0x00C4, r1
			minutes_counter++;
    3a16:	80 91 c5 00 	lds	r24, 0x00C5
    3a1a:	8f 5f       	subi	r24, 0xFF	; 255
    3a1c:	80 93 c5 00 	sts	0x00C5, r24
		}
		if (minutes_counter==60)
    3a20:	80 91 c5 00 	lds	r24, 0x00C5
    3a24:	8c 33       	cpi	r24, 0x3C	; 60
    3a26:	39 f4       	brne	.+14     	; 0x3a36 <main+0x15d6>
		{
			minutes_counter=0;
    3a28:	10 92 c5 00 	sts	0x00C5, r1
			hours_counter++;
    3a2c:	80 91 c6 00 	lds	r24, 0x00C6
    3a30:	8f 5f       	subi	r24, 0xFF	; 255
    3a32:	80 93 c6 00 	sts	0x00C6, r24
		}
		if (hours_counter==24)
    3a36:	80 91 c6 00 	lds	r24, 0x00C6
    3a3a:	88 31       	cpi	r24, 0x18	; 24
    3a3c:	11 f0       	breq	.+4      	; 0x3a42 <main+0x15e2>
    3a3e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <main+0x4c>
		{
			hours_counter=0;
    3a42:	10 92 c6 00 	sts	0x00C6, r1
    3a46:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <main+0x4c>

00003a4a <__vector_11>:
}

void __vector_11 (void) __attribute__ ((signal));

void __vector_11 (void)
{
    3a4a:	1f 92       	push	r1
    3a4c:	0f 92       	push	r0
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	0f 92       	push	r0
    3a52:	11 24       	eor	r1, r1
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	ef 93       	push	r30
    3a5a:	ff 93       	push	r31
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
	  static u32 A_u32_counter = 0;

	  A_u32_counter ++;
    3a64:	80 91 c7 00 	lds	r24, 0x00C7
    3a68:	90 91 c8 00 	lds	r25, 0x00C8
    3a6c:	01 96       	adiw	r24, 0x01	; 1
    3a6e:	90 93 c8 00 	sts	0x00C8, r25
    3a72:	80 93 c7 00 	sts	0x00C7, r24

	if(A_u32_counter == 123)
    3a76:	80 91 c7 00 	lds	r24, 0x00C7
    3a7a:	90 91 c8 00 	lds	r25, 0x00C8
    3a7e:	8b 37       	cpi	r24, 0x7B	; 123
    3a80:	91 05       	cpc	r25, r1
    3a82:	69 f4       	brne	.+26     	; 0x3a9e <__vector_11+0x54>
	{
	A_u32_counter =0;
    3a84:	10 92 c8 00 	sts	0x00C8, r1
    3a88:	10 92 c7 00 	sts	0x00C7, r1
	TCNT0 = 238;
    3a8c:	e2 e5       	ldi	r30, 0x52	; 82
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	8e ee       	ldi	r24, 0xEE	; 238
    3a92:	80 83       	st	Z, r24
	seconds_counter++;
    3a94:	80 91 c4 00 	lds	r24, 0x00C4
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	80 93 c4 00 	sts	0x00C4, r24
	}
}
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	ff 91       	pop	r31
    3aa4:	ef 91       	pop	r30
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	0f 90       	pop	r0
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	0f 90       	pop	r0
    3ab0:	1f 90       	pop	r1
    3ab2:	18 95       	reti

00003ab4 <__udivmodqi4>:
    3ab4:	99 1b       	sub	r25, r25
    3ab6:	79 e0       	ldi	r23, 0x09	; 9
    3ab8:	04 c0       	rjmp	.+8      	; 0x3ac2 <__udivmodqi4_ep>

00003aba <__udivmodqi4_loop>:
    3aba:	99 1f       	adc	r25, r25
    3abc:	96 17       	cp	r25, r22
    3abe:	08 f0       	brcs	.+2      	; 0x3ac2 <__udivmodqi4_ep>
    3ac0:	96 1b       	sub	r25, r22

00003ac2 <__udivmodqi4_ep>:
    3ac2:	88 1f       	adc	r24, r24
    3ac4:	7a 95       	dec	r23
    3ac6:	c9 f7       	brne	.-14     	; 0x3aba <__udivmodqi4_loop>
    3ac8:	80 95       	com	r24
    3aca:	08 95       	ret

00003acc <__prologue_saves__>:
    3acc:	2f 92       	push	r2
    3ace:	3f 92       	push	r3
    3ad0:	4f 92       	push	r4
    3ad2:	5f 92       	push	r5
    3ad4:	6f 92       	push	r6
    3ad6:	7f 92       	push	r7
    3ad8:	8f 92       	push	r8
    3ada:	9f 92       	push	r9
    3adc:	af 92       	push	r10
    3ade:	bf 92       	push	r11
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	ca 1b       	sub	r28, r26
    3af6:	db 0b       	sbc	r29, r27
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	09 94       	ijmp

00003b04 <__epilogue_restores__>:
    3b04:	2a 88       	ldd	r2, Y+18	; 0x12
    3b06:	39 88       	ldd	r3, Y+17	; 0x11
    3b08:	48 88       	ldd	r4, Y+16	; 0x10
    3b0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b16:	b9 84       	ldd	r11, Y+9	; 0x09
    3b18:	c8 84       	ldd	r12, Y+8	; 0x08
    3b1a:	df 80       	ldd	r13, Y+7	; 0x07
    3b1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3b1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3b20:	0c 81       	ldd	r16, Y+4	; 0x04
    3b22:	1b 81       	ldd	r17, Y+3	; 0x03
    3b24:	aa 81       	ldd	r26, Y+2	; 0x02
    3b26:	b9 81       	ldd	r27, Y+1	; 0x01
    3b28:	ce 0f       	add	r28, r30
    3b2a:	d1 1d       	adc	r29, r1
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	ed 01       	movw	r28, r26
    3b38:	08 95       	ret

00003b3a <_exit>:
    3b3a:	f8 94       	cli

00003b3c <__stop_program>:
    3b3c:	ff cf       	rjmp	.-2      	; 0x3b3c <__stop_program>
